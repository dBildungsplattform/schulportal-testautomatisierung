name: Run Playwright Tests
run-name: Test ${{ inputs.frontendHostname }} with ${{ inputs.browser }} and ${{ inputs.tag }} from ${{ inputs.playwright_branch }}

on:
  workflow_call:
    inputs:
      frontendHostname:
        type: string
        description: 'Hostname of the frontend server'
        required: true
        default: 'main.dev.spsh.dbildungsplattform.de'
      tag:
        type: string
        description: 'Select which tests are run'
        required: true
        default: 'dev'
      browser:
        type: string
        description: 'Select which browser to use for testing'
        required: true
        default: 'chromium'
      playwright_branch:
        type: string
        description: 'The branch to take Playwright-tests from.'
        required: false
        default: main

  workflow_dispatch:
    inputs:
      frontendHostname: 
        type: string
        description: 'Hostname of the frontend server'
        required: true
        default: 'main.dev.spsh.dbildungsplattform.de'
      tag:
        description: 'Select which tests are run'
        required: true
        default: 'dev'
        type: choice
        options:
          - smoke
          - dev
          - stage
      browser:
        description: 'Select which browser to use for testing'
        required: true
        default: 'chromium'
        type: choice
        options:
          - chromium
          - chrome
          - firefox
          - webkit
          - msedge
      playwright_branch: 
        type: string
        description: 'The branch to take Playwright-tests from.'
        required: false
        default: main


jobs:
  run_playwright_tests:
    continue-on-error: true
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      # --------------------------
      # Checkout & Node setup
      # --------------------------
      - uses: actions/checkout@v3
        with:
          repository: 'dBildungsplattform/schulportal-testautomatisierung'
          ref: ${{ inputs.playwright_branch }}

      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Remove Microsoft APT and  Update Packages
        run: |
          sudo rm /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update || true
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      # --------------------------
      # Setup SSH agent for LDAP tunnel
      # --------------------------
      - name: Setup SSH agent
        if: ${{ inputs.tag == 'dev' }}
        uses: webfactory/ssh-agent@dc588b651fe13675774614f8e6a936a468676387 # v0.9.0
        with:
          ssh-private-key: ${{ secrets.TUNNEL_USER_SSHKEY }}

      # --------------------------
      # Add kubeconfig (main namespace only)
      # --------------------------
      - name: Add kubeconfig
        if: ${{ inputs.tag == 'dev' }}
        env:
          KUBECONFIG_CONTENT: ${{ secrets.SPSH_DEV_KUBECONFIG }}
        run: |
          mkdir -p ~/.kube
          echo "$KUBECONFIG_CONTENT" > ~/.kube/config
          chmod 600 ~/.kube/config

      # --------------------------
      # Get LDAP Pod IP
      # --------------------------
      - name: Get LDAP Pod IP
        if: ${{ inputs.tag == 'dev' }}
        run: |
          POD_IP=$(kubectl get pod dbildungs-iam-ldap-0 -n main -o=jsonpath='{.status.podIP}')
          echo "LDAP_POD_IP=$POD_IP" >> $GITHUB_ENV

      # --------------------------
      # Get LDAP admin password from Kubernetes
      # --------------------------
      - name: Get LDAP admin password from Kubernetes
        if: ${{ inputs.tag == 'dev' }}
        run: |
          LDAP_ADMIN_PASSWORD=$(kubectl -n main get secret dbildungs-iam-ldap -o jsonpath='{.data.LDAP_ADMIN_PASSWORD}' | base64 -d)
          echo "::add-mask::$LDAP_ADMIN_PASSWORD"
          echo "LDAP_ADMIN_PASSWORD=$LDAP_ADMIN_PASSWORD" >> $GITHUB_ENV

      # --------------------------
      # Create SSH tunnel to LDAP
      # --------------------------
      - name: Create SSH tunnel to LDAP
        if: ${{ inputs.tag == 'dev' }}
        env:
          TUNNEL_USER: ${{ secrets.TUNNEL_USER }}
          TUNNELHOST: ${{ secrets.TUNNELHOST }}
          TUNNEL_PORT: ${{ secrets.TUNNEL_PORT }}
        run: |
          ssh -o StrictHostKeyChecking=no \
              -L 1389:$LDAP_POD_IP:1389 $TUNNEL_USER@$TUNNELHOST \
              -p $TUNNEL_PORT \
              -N -o ServerAliveInterval=15 -o ExitOnForwardFailure=yes &
          disown

      # --------------------------
      # Install ldap-utils & test connectivity
      # --------------------------
      - name: Install ldap-utils
        if: ${{ inputs.tag == 'dev' }}
        run: sudo apt-get install -y ldap-utils

      - name: Test LDAP Connectivity
        if: ${{ inputs.tag == 'dev' }}
        run: ldapwhoami -x -H ldap://localhost:1389 -D "cn=admin,dc=schule-sh,dc=de" -w "$LDAP_ADMIN_PASSWORD"

      # --------------------------
      # Run Playwright tests
      # --------------------------
      - name: Run Playwright tests
        env:
          FRONTEND_URL: 'https://${{ inputs.frontendHostname }}/'
          TAG: ${{ inputs.tag }}
          BROWSER: ${{ inputs.browser }}
          USER: '${{ secrets.USER }}'
          PW: '${{ secrets.PW }}'
          LDAP_URL: ldap://localhost:1389
          LDAP_ADMIN_PASSWORD: ${{ env.LDAP_ADMIN_PASSWORD }}
        run: npx playwright test --config=playwright.config.ts --grep @"$TAG" --project "$BROWSER"

      # --------------------------
      # Post test
      # --------------------------
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - uses: RocketChat/Rocket.Chat.GitHub.Action.Notification@2966f5f2e0313a94f965a51c08700cfecf0b6572 # 1.1.1
        if: failure()
        with:
          type: ${{ job.status }}
          job_name: 'Playwright Job Status: '
          url: ${{ secrets.RC_WEBHOOK }}
          channel: '#SPSH-Test-Automation'
          username: Playwright Notificator
