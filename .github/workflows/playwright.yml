name: Playwright Tests

on:
  workflow_call:
    inputs:
      frontendHostname:
        type: string
        description: 'Hostname of the frontend server (optional)'
        required: false
      playwright_branch:
        type: string
        description: 'The name of the branch to be tested with Playwright.'
        required: false
        default: main
  workflow_dispatch:
    inputs:
      frontendHostname:
        type: string
        description: 'Hostname of the frontend server (optional)'
        required: true
      playwright_branch:
        type: string
        description: 'The name of the branch to be tested with Playwright.'
        required: false
        default: main
      stage:
        description: 'Stage to run the tests on'
        required: true
        default: dev
        type: choice
        options:
          - dev
          - staging
      ldapNamespace:
        description: 'Namespace of the ldap pod to be used'
        required: true
        default: 'main'
        type: string

  push:
    branches: [ main ]

jobs:

  run_playwright_end2end_tests:
    environment: ${{ inputs.stage }}
    continue-on-error: true
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - name: If input frontendHostname is given, set env variable
      if: ${{ inputs.frontendHostname }}
      run: echo "FRONTEND_URL=https://${{ inputs.frontendHostname }}/" >> $GITHUB_ENV

    - uses: actions/checkout@v3
      with:
        repository: 'dBildungsplattform/schulportal-testautomatisierung'
        ref: ${{ inputs.playwright_branch }}

    - uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Remove Microsoft APT and  Update Packages
      run: |
        sudo rm /etc/apt/sources.list.d/microsoft-prod.list
        sudo apt-get update || true

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    # --------------------------
    # Setup SSH key for the LDAP tunnel
    # --------------------------
    - name: Setup SSH key for ldap tunnel
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.TUNNEL_USER_SSHKEY }}

    # --------------------------
    # Add kubeconfig
    # --------------------------
    - name: Add kubeconfig
      env:
        KUBECONFIG_CONTENT: ${{ secrets.SPSH_DEV_KUBECONFIG }}
      run: |
        mkdir -p ~/.kube
        echo "$KUBECONFIG_CONTENT" > ~/.kube/config
        chmod 600 ~/.kube/config

    # --------------------------
    # Get LDAP Pod IP
    # --------------------------
    - name: Get Pod IP
      run: |
        POD_IP=$(kubectl get pod dbildungs-iam-ldap-0 -n ${{inputs.ldapNamespace}} -o=jsonpath='{.status.podIP}')
        echo "LDAP_POD_IP=$POD_IP" >> $GITHUB_ENV

    # --------------------------
    # Get LDAP admin password from Kubernetes
    # --------------------------
    - name: Get LDAP admin password from Kubernetes
      run: |
        LDAP_PASS=$(kubectl -n main get secret dbildungs-iam-ldap -o jsonpath='{.data.LDAP_ADMIN_PASSWORD}' | base64 -d)
        echo "LDAP_ADMIN_PASSWORD=$LDAP_PASS" >> $GITHUB_ENV

    # --------------------------
    # Create SSH tunnel to LDAP
    # --------------------------
    - name: Create SSH tunnel to LDAP
      env:
        TUNNEL_USER: ${{ secrets.TUNNEL_USER }}
        TUNNELHOST: ${{ secrets.TUNNELHOST }}
        TUNNEL_PORT: ${{ secrets.TUNNEL_PORT }}
      run: |
        ssh -o StrictHostKeyChecking=no \
            -L 1389:$LDAP_POD_IP:1389 $TUNNEL_USER@$TUNNELHOST \
            -p $TUNNEL_PORT \
            -N -o ServerAliveInterval=15 -o ExitOnForwardFailure=yes &
        disown

        
    # --------------------------
    # Install ldap utils
    # --------------------------
    - name: Install ldap-utils
      run: sudo apt-get install -y ldap-utils

    # --------------------------
    # Test LDAP Connectivity
    # --------------------------
    - name: Test LDAP Connectivity
      run: ldapwhoami -x -H ldap://localhost:1389 -D "cn=admin,dc=schule-sh,dc=de" -w $LDAP_ADMIN_PASSWORD"

    # --------------------------
    # List Playwright tests
    # --------------------------
    - name: List Playwright tests
      run: npx playwright test --list --grep "@short"

    # --------------------------
    # Run Playwright tests
    # --------------------------
    - name: Run Playwright tests
      run: npx playwright test --config=playwright.config.ts --grep "@short" --project "chromium"
      env:
        USER: '${{ secrets.USER }}'
        PW: '${{ secrets.PW }}'
        LDAP_URL: 'ldap://localhost:1389'
        LDAP_ADMIN_PASSWORD: '${{ secrets.LDAP_ADMIN_PASSWORD }}'

    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

    - uses: RocketChat/Rocket.Chat.GitHub.Action.Notification@1.1.1
      if: failure()
      with:
        type: ${{ job.status }}
        job_name: 'Playwright Job Status: '
        url: ${{ secrets.RC_WEBHOOK }}
        channel: '#SPSH-Test-Automation'
        username: Playwright Notificator
