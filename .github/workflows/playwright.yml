name: Playwright Tests

on:
  workflow_call:
    inputs:
      frontendHostname:
        type: string
        description: 'Hostname of the frontend server (optional)'
        required: false
      playwright_branch:
        type: string
        description: 'The name of the branch to be tested with Playwright.'
        required: false
        default: main
  workflow_dispatch:
    inputs:
      frontendHostname:
        type: string
        description: 'Hostname of the frontend server (optional)'
        required: true
      playwright_branch:
        type: string
        description: 'The name of the branch to be tested with Playwright.'
        required: false
        default: main
      ldapCluster:
        description: 'Cluster to which the ssh-tunnel should be created for the ldap connectivity'
        required: false
        default: 'spsh-dev-schulportal'
        type: choice
        options:
          - spshinfra-dev-schulportal-01
          - spsh-dev-schulportal
          - spsh-staging-schulportal
      ldapNamespace:
        description: 'Namespace of the ldap pod to be used'
        required: false
        default: 'main'
        type: string

  push:
    branches: [ main ]

jobs:

  run_playwright_end2end_tests:
    environment: dev
    continue-on-error: true
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - name: Print test-env
      run: echo ${{ vars.TEST_ENV }}
    - name: If input frontendHostname is given, set env variable
      if: ${{ inputs.frontendHostname }}
      run: echo "FRONTEND_URL=https://${{ inputs.frontendHostname }}/" >> $GITHUB_ENV
    - uses: actions/checkout@v3
      with:
        repository: 'dBildungsplattform/schulportal-testautomatisierung'
        ref: ${{ inputs.playwright_branch }}
    - uses: actions/setup-node@v3
      with:
        node-version: 16
    - name: Remove Microsoft APT and  Update Packages
      run: |
        sudo rm /etc/apt/sources.list.d/microsoft-prod.list
        sudo apt-get update || true
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    - name: Add ssh key for ldap tunnel
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY_LDAP_USER }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
    
    - name: Map tunnel target to host
      run: |
        case "${{ inputs.ldapCluster }}" in
          spshinfra-dev-schulportal-01) echo "TUNNEL_HOST=${{ secrets.TUNNELHOST_INFRA_DEV }}" >> $GITHUB_ENV ;;
          spsh-dev-schulportal) echo "TUNNEL_HOST=${{ vars.TEST_ENV }}" >> $GITHUB_ENV ;;
          spsh-staging-schulportal) echo "TUNNEL_HOST=${{ secrets.TUNNELHOST_STAGING }}" >> $GITHUB_ENV ;;
        esac

    - name: Map tunnel target to kubeconfig
      run: |
        case "${{ inputs.ldapCluster }}" in
          spshinfra-dev-schulportal-01) echo "KUBECONFIG_CONTENT=NO_SECRET_AVAILABLE" >> $GITHUB_ENV ;;
          spsh-dev-schulportal) echo "KUBECONFIG_CONTENT=${{ secrets.SPSH_DEV_KUBECONFIG }}" >> $GITHUB_ENV ;;
          spsh-staging-schulportal) echo "KUBECONFIG_CONTENT=NO_SECRET_AVAILABLE" >> $GITHUB_ENV ;;
        esac

    - name: Add tunnel host to known_hosts
      run: |
        ssh-keyscan -p ${{ secrets.TUNNEL_PORT }} $TUNNEL_HOST >> ~/.ssh/known_hosts

    # TODO make kubeconfig depend on cluster   
    - name: Add kubeconfig
      run: |
        mkdir -p ~/.kube
        echo $KUBECONFIG_CONTENT > ~/.kube/config

    - name: Get Pod IP
      run: |
        POD_IP=$(kubectl get pod dbildungs-iam-ldap-0 -n ${{inputs.ldapNamespace}} -o=jsonpath='{.status.podIP}')
        echo "LDAP_POD_IP=$POD_IP" >> $GITHUB_ENV
    
    - name: Create SSH tunnel to LDAP
      run: |
        ssh -i ~/.ssh/id_rsa \
            -L 1389:$LDAP_POD_IP:1389 ${{ secrets.TUNNEL_USER }}@$TUNNEL_HOST \
            -p ${{ secrets.TUNNEL_PORT }} \
            -N -o ServerAliveInterval=15 -o ExitOnForwardFailure=yes &
        disown

    - name: List Playwright tests
      run: npx playwright test --list --grep "@short"
    # - name: Run Playwright tests
    #   run: npx playwright test --config=playwright.config.ts --grep "@short" --project "chromium"
    
    #   env:
    #     USER: '${{ secrets.USER }}'
    #     PW: '${{ secrets.PW }}'
    # - uses: actions/upload-artifact@v4
    #   if: always()
    #   with:
    #     name: playwright-report
    #     path: playwright-report/
    #     retention-days: 30
    # - uses: RocketChat/Rocket.Chat.GitHub.Action.Notification@1.1.1
    #   if: failure()
    #   with:
    #     type: ${{ job.status }} 
    #     job_name: 'Playwright Job Status: '
    #     url: ${{ secrets.RC_WEBHOOK }}
    #     channel: '#SPSH-Test-Automation'
    #     username: Playwright Notificator