name: Pull Request Playwright Test

on:
  pull_request:
    branches:
      - main

jobs:
  run_playwright_pre_pr_test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Remove Microsoft APT and Update Packages
      run: |
        sudo rm /etc/apt/sources.list.d/microsoft-prod.list
        sudo apt-get update || true

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    # --------------------------
    # Setup SSH agent for LDAP tunnel
    # --------------------------
    - name: Setup SSH agent
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.TUNNEL_USER_SSHKEY }}

    # --------------------------
    # Add kubeconfig
    # --------------------------
    - name: Add kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.SPSH_DEV_KUBECONFIG }}" > ~/.kube/config

    # --------------------------
    # Get LDAP Pod IP
    # --------------------------
    - name: Get LDAP Pod IP
      run: |
        POD_IP=$(kubectl get pod dbildungs-iam-ldap-0 -n main -o=jsonpath='{.status.podIP}')
        echo "LDAP_POD_IP=$POD_IP" >> $GITHUB_ENV

    # --------------------------
    # Create SSH tunnel to LDAP
    # --------------------------
    - name: Create SSH tunnel to LDAP
      run: |
        ssh -o StrictHostKeyChecking=no \
            -L 1389:$LDAP_POD_IP:1389 ${{ secrets.TUNNEL_USER }}@${{ secrets.TUNNELHOST }} \
            -p ${{ secrets.TUNNEL_PORT }} \
            -N -o ServerAliveInterval=15 -o ExitOnForwardFailure=yes &
        disown

    # --------------------------
    # Install ldap utils
    # --------------------------
    - name: Install ldap-utils
      run: sudo apt-get install -y ldap-utils

    # --------------------------
    # Secrets availability check
    # --------------------------
    - name: Debug secrets availability
      run: |
        if [ -z "${{ secrets.LDAP_ADMIN_PASSWORD }}" ]; then
        echo "LDAP_ADMIN_PASSWORD is NOT available in this run"
        else
          echo "LDAP_ADMIN_PASSWORD is present (value hidden)"
        fi

    # --------------------------
    # Test LDAP Connectivity
    # --------------------------
    - name: Test LDAP Connectivity
      run: ldapwhoami -x -H ldap://localhost:1389 -D "cn=admin,dc=schule-sh,dc=de" -w ${{ secrets.LDAP_ADMIN_PASSWORD }}

    # --------------------------
    # Determine Branch Tag
    # --------------------------
    - name: Determine Branch Tag
      id: determine-tag
      run: |
        regex_long='^([[:alpha:]]+?-[[:digit:]]+-[[:digit:]]+)'
        regex_short='^([[:alpha:]]+?-[[:digit:]]+)'
        if [[ "${{ github.head_ref }}" =~ $regex_long ]]; then
          tag="${BASH_REMATCH[1]}"
        elif [[ "${{ github.head_ref }}" =~ $regex_short ]]; then
          tag="${BASH_REMATCH[1]}"
        elif [[ "${{ github.head_ref }}" == 'main' ]]; then
          tag=""
        else
          echo "::error::Couldn't extract ticket from branch ${{ github.head_ref }}"
          exit 1
        fi
        echo "tag=${tag}" >> "$GITHUB_OUTPUT"
        echo "branch to merge from tag=${tag}"

    # --------------------------
    # Determine Branch Count
    # --------------------------
    - name: Determine Branch Count
      id: branch-count
      env:
        TAG: ${{ steps.determine-tag.outputs.tag }}
      run: |
        REPOS=(
          "https://github.com/dBildungsplattform/dbildungs-iam-server.git"
          "https://github.com/dbildungsplattform/schulportal-client.git"
          "https://github.com/dbildungsplattform/dbildungs-iam-keycloak.git"
          "https://github.com/dbildungsplattform/dbildungs-iam-ldap.git"
        )
        MATCH_COUNT=0
        for REPO in "${REPOS[@]}"; do
          echo "🔍 Checking $REPO for branch '$TAG'"
          BRANCH_EXISTS=$(git ls-remote --heads "$REPO" "refs/heads/$TAG")
          if [[ -n "$BRANCH_EXISTS" ]]; then
            echo "✅ Branch '$TAG' exists in $REPO"
            MATCH_COUNT=$((MATCH_COUNT + 1))
          else
            echo "Branch '$TAG' does NOT exist in $REPO"
          fi
        done
        echo "Total matches found: $MATCH_COUNT"
        echo "count=$MATCH_COUNT" >> "$GITHUB_OUTPUT"

    # --------------------------
    # Determine Frontend URL
    # --------------------------
    - name: Determine Frontend Url
      id: determine-fe-url
      run: |
        if [ ${{ steps.branch-count.outputs.count }} -ge 1 ]; then
          FRONTEND_URL_PREFIX=$(echo "${{ steps.determine-tag.outputs.tag }}" | tr '[:upper:]' '[:lower:]')
          FRONTEND_URL="https://${FRONTEND_URL_PREFIX}.dev.spsh.dbildungsplattform.de/"
          echo "FRONTEND_URL=$FRONTEND_URL"
          echo "fe_url=${FRONTEND_URL}" >> "$GITHUB_OUTPUT"
        else
          echo "No branch to ticket found, using main FE and BE infrastructure"
          FRONTEND_URL="https://main.dev.spsh.dbildungsplattform.de/"
          echo "FRONTEND_URL=$FRONTEND_URL"
          echo "fe_url=${FRONTEND_URL}" >> "$GITHUB_OUTPUT" 
        fi
        echo "fe_url=${FRONTEND_URL}" >> "$GITHUB_OUTPUT"

    # --------------------------
    # Run Playwright tests
    # --------------------------
    - name: Run Playwright tests
      run: npx playwright test --config=playwright.config.ts --grep "@long" --project "chromium"
      env:
        FRONTEND_URL: ${{ steps.determine-fe-url.outputs.fe_url }}
        ENV: dev
        USER: ${{ secrets.USER }}
        PW: ${{ secrets.PW }}
        LDAP_URL: 'ldap://localhost:1389'
        LDAP_ADMIN_PASSWORD: '${{ secrets.LDAP_ADMIN_PASSWORD }}'

    # --------------------------
    # Upload report
    # --------------------------
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

    # --------------------------
    # Notify RocketChat on failure
    # --------------------------
    - uses: RocketChat/Rocket.Chat.GitHub.Action.Notification@1.1.1
      if: failure()
      with:
        type: ${{ job.status }}
        job_name: 'Playwright Job Status: '
        url: ${{ secrets.RC_WEBHOOK }}
        channel: '#SPSH-Test-Automation'
        username: Playwright Notificator
