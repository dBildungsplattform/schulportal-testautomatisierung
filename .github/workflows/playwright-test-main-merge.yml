name: Pull Request Playwright Test

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  run_playwright_pre_pr_test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 16
    - name: Remove Microsoft APT and  Update Packages
      run: |
        sudo rm /etc/apt/sources.list.d/microsoft-prod.list
        sudo apt-get update || true
    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

      #for PR use  ${{ github.head_ref }}
      
    - name: Determine Branch Tag
      id: determine-tag
      run: |
        regex_long='^([[:alpha:]]+?-[[:digit:]]+-[[:digit:]]+)'
        regex_short='^([[:alpha:]]+?-[[:digit:]]+)'
        if [[ "${{ github.ref_name  }}" =~ $regex_long ]]; then
          tag="$(echo ${BASH_REMATCH[1]} | tr [A-Z] [a-z])"
        elif [[ "${{ github.ref_name  }}" =~ $regex_short ]]; then
          tag="$(echo ${BASH_REMATCH[1]} | tr [A-Z] [a-z])"
        elif [[ "${{ github.ref_name  }}" == 'main' ]]; then
          tag=""
        else
        echo "::error::Couldn't extract ticket from branch" ${{ github.ref_name  }} ". If not main the branch name should begin alpha-digit or alpha-digit-digit blocks (e.g. SPSH-1234-test-name or release-1-1-optional-text)"
          exit 1
        fi
        echo "tag=${tag}" >> "$GITHUB_OUTPUT"
        echo "branch to merge from tag=${tag}"

    - name: get branches
      id: get-branches
      run: |
        git fetch --all
        BRANCHES=$(git branch -r | sed 's/origin\///' | tr '\n' ' ')
        echo "BRANCHES=$BRANCHES"
  
        #echo "BRANCHES=$BRANCHES" >> "$GITHUB_ENV"
        #echo "branches=$BRANCHES" >> "$GITHUB_OUTPUT"
  
        echo "BRANCHES<<EOF" >> "$GITHUB_ENV"
        echo "$BRANCHES" >> "$GITHUB_ENV"
        echo "EOF" >> "$GITHUB_ENV"
  
        echo "BRANCH_LIST=$BRANCHES"
        

    - name: Get all branches
      id: get-branches-2
      run: |
        git fetch --all
        SEARCH_STRING="your_search_string"
        BRANCHES=$(git branch -r | sed 's/origin\///' | grep -i "$SEARCH_STRING" | tr '\n' ' ')
        echo "BRANCHES=$BRANCHES" >> "$GITHUB_ENV"
        echo "Branches V2= $BRANCHES"
        echo "branches=$BRANCHES" >> "$GITHUB_OUTPUT"
        

    - name: Filter branches by string
      id: filter-branches
      run: |
        SEARCH_STRING="${{ steps.determine-tag.outputs.tag }}"
        echo "searching for string $SEARCH_STRING"
        BRANCHES="${{ steps.get-branches.outputs.branches }}"
        
        # Find all matching branches (ignoring case)
        MATCHING_BRANCHES=$(echo "$BRANCHES" | grep -i "$SEARCH_STRING" || true)
  
        if [ -z "$MATCHING_BRANCHES" ]; then
          echo "::warning::No branches found matching '$SEARCH_STRING'."
        fi
        
        echo "Branches with tag $SEARCH_STRING: $MATCHING_BRANCHES"
        # Convert multiline string to a single-line comma-separated list
        MATCHING_BRANCHES_CSV=$(echo "$MATCHING_BRANCHES" | paste -sd "," -)
  
        # Save to environment variables and GitHub Actions outputs
        echo "MATCHING_BRANCHES=$MATCHING_BRANCHES_CSV" >> "$GITHUB_ENV"
        echo "matching_branches=$MATCHING_BRANCHES_CSV" >> "$GITHUB_OUTPUT"
  
        # Print output for debugging
        echo "Matching branches: $MATCHING_BRANCHES_CSV"
      
    
    - name: Determine Frontend Url by checking current branches
      id: check-branch-count
      run: |
        NUM_BRANCHES=$(echo "$MATCHING_BRANCHES" | wc -l)
        echo "Number of matching branches: $NUM_BRANCHES"
        
        if [ "$NUM_BRANCHES" -gt 1 ]; then
          echo "At least one more branch for ticket was found, using branch FE and BE infrastructure"
          FRONTEND_URL="https://${{ steps.determine-tag.outputs.tag }}.dev.spsh.dbildungsplattform.de/"
          echo "Frontend URL=" "$FRONTEND_URL"
        else
          echo "No other branch to ticket found, using main FE and BE infrastructure"
          FRONTEND_URL="https://main.dev.spsh.dbildungsplattform.de/"
          echo "Frontend URL=" "$FRONTEND_URL"
        fi
      env:
        MATCHING_BRANCHES: ${{ env.MATCHING_BRANCHES }}



    #- name: Run Playwright tests
    #  run:  ENV='dev' FRONTEND_URL='${{ env.FRONTEND_URL }}' npx playwright test --config=playwright.config.ts --grep "@long" --project "chromium"
      
    #  env:
    #    USER: '${{ secrets.USER }}'
    #    PW: '${{ secrets.PW }}'
    #- uses: actions/upload-artifact@v4
    #  if: always()
    #  with:
    #    name: playwright-report
    #    path: playwright-report/
    #    retention-days: 30npm login
    #- uses: RocketChat/Rocket.Chat.GitHub.Action.Notification@1.1.1
    #  if: failure()
    #  with:
    #    type: ${{ job.status }} 
    #    job_name: 'Playwright Job Status: '
    #    url: ${{ secrets.RC_WEBHOOK }}
    #    channel: '#SPSH-Test-Automation'
    #    username: Playwright Notificator