/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DBiamPersonenzuordnungResponse } from './DBiamPersonenzuordnungResponse';
import {
    DBiamPersonenzuordnungResponseFromJSON,
    DBiamPersonenzuordnungResponseFromJSONTyped,
    DBiamPersonenzuordnungResponseToJSON,
} from './DBiamPersonenzuordnungResponse';

/**
 * 
 * @export
 * @interface DBiamPersonenuebersichtResponse
 */
export interface DBiamPersonenuebersichtResponse {
    /**
     * 
     * @type {string}
     * @memberof DBiamPersonenuebersichtResponse
     */
    personId: string;
    /**
     * 
     * @type {string}
     * @memberof DBiamPersonenuebersichtResponse
     */
    vorname: string;
    /**
     * 
     * @type {string}
     * @memberof DBiamPersonenuebersichtResponse
     */
    nachname: string;
    /**
     * 
     * @type {string}
     * @memberof DBiamPersonenuebersichtResponse
     */
    benutzername: string;
    /**
     * Date of the most recent changed personenkontext in the Zuordnungen
     * @type {Date}
     * @memberof DBiamPersonenuebersichtResponse
     */
    lastModifiedZuordnungen: Date | null;
    /**
     * 
     * @type {Array<DBiamPersonenzuordnungResponse>}
     * @memberof DBiamPersonenuebersichtResponse
     */
    zuordnungen: Array<DBiamPersonenzuordnungResponse>;
}

/**
 * Check if a given object implements the DBiamPersonenuebersichtResponse interface.
 */
export function instanceOfDBiamPersonenuebersichtResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "personId" in value;
    isInstance = isInstance && "vorname" in value;
    isInstance = isInstance && "nachname" in value;
    isInstance = isInstance && "benutzername" in value;
    isInstance = isInstance && "lastModifiedZuordnungen" in value;
    isInstance = isInstance && "zuordnungen" in value;

    return isInstance;
}

export function DBiamPersonenuebersichtResponseFromJSON(json: any): DBiamPersonenuebersichtResponse {
    return DBiamPersonenuebersichtResponseFromJSONTyped(json, false);
}

export function DBiamPersonenuebersichtResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): DBiamPersonenuebersichtResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'personId': json['personId'],
        'vorname': json['vorname'],
        'nachname': json['nachname'],
        'benutzername': json['benutzername'],
        'lastModifiedZuordnungen': (json['lastModifiedZuordnungen'] === null ? null : new Date(json['lastModifiedZuordnungen'])),
        'zuordnungen': ((json['zuordnungen'] as Array<any>).map(DBiamPersonenzuordnungResponseFromJSON)),
    };
}

export function DBiamPersonenuebersichtResponseToJSON(value?: DBiamPersonenuebersichtResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'personId': value.personId,
        'vorname': value.vorname,
        'nachname': value.nachname,
        'benutzername': value.benutzername,
        'lastModifiedZuordnungen': (value.lastModifiedZuordnungen === null ? null : value.lastModifiedZuordnungen.toISOString()),
        'zuordnungen': ((value.zuordnungen as Array<any>).map(DBiamPersonenzuordnungResponseToJSON)),
    };
}

