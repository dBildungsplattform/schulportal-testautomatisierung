/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AssignHardwareTokenResponse
 */
export interface AssignHardwareTokenResponse {
    /**
     * 
     * @type {number}
     * @memberof AssignHardwareTokenResponse
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof AssignHardwareTokenResponse
     */
    jsonrpc: string;
    /**
     * 
     * @type {number}
     * @memberof AssignHardwareTokenResponse
     */
    time: number;
    /**
     * 
     * @type {string}
     * @memberof AssignHardwareTokenResponse
     */
    version: string;
    /**
     * 
     * @type {string}
     * @memberof AssignHardwareTokenResponse
     */
    versionnumber: string;
    /**
     * 
     * @type {string}
     * @memberof AssignHardwareTokenResponse
     */
    signature: string;
    /**
     * 
     * @type {string}
     * @memberof AssignHardwareTokenResponse
     */
    dialogText: string;
}

/**
 * Check if a given object implements the AssignHardwareTokenResponse interface.
 */
export function instanceOfAssignHardwareTokenResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "jsonrpc" in value;
    isInstance = isInstance && "time" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "versionnumber" in value;
    isInstance = isInstance && "signature" in value;
    isInstance = isInstance && "dialogText" in value;

    return isInstance;
}

export function AssignHardwareTokenResponseFromJSON(json: any): AssignHardwareTokenResponse {
    return AssignHardwareTokenResponseFromJSONTyped(json, false);
}

export function AssignHardwareTokenResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AssignHardwareTokenResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'jsonrpc': json['jsonrpc'],
        'time': json['time'],
        'version': json['version'],
        'versionnumber': json['versionnumber'],
        'signature': json['signature'],
        'dialogText': json['dialogText'],
    };
}

export function AssignHardwareTokenResponseToJSON(value?: AssignHardwareTokenResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'jsonrpc': value.jsonrpc,
        'time': value.time,
        'version': value.version,
        'versionnumber': value.versionnumber,
        'signature': value.signature,
        'dialogText': value.dialogText,
    };
}

