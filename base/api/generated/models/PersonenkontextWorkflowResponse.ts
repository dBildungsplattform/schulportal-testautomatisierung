/* tslint:disable */
/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OrganisationResponseLegacy } from './OrganisationResponseLegacy';
import {
    OrganisationResponseLegacyFromJSON,
    OrganisationResponseLegacyFromJSONTyped,
    OrganisationResponseLegacyToJSON,
} from './OrganisationResponseLegacy';
import type { RolleResponse } from './RolleResponse';
import {
    RolleResponseFromJSON,
    RolleResponseFromJSONTyped,
    RolleResponseToJSON,
} from './RolleResponse';

/**
 * 
 * @export
 * @interface PersonenkontextWorkflowResponse
 */
export interface PersonenkontextWorkflowResponse {
    /**
     * List of available organisations.
     * @type {Array<OrganisationResponseLegacy>}
     * @memberof PersonenkontextWorkflowResponse
     */
    organisations: Array<OrganisationResponseLegacy>;
    /**
     * List of available roles.
     * @type {Array<RolleResponse>}
     * @memberof PersonenkontextWorkflowResponse
     */
    rollen: Array<RolleResponse>;
    /**
     * Selected organisation.
     * @type {string}
     * @memberof PersonenkontextWorkflowResponse
     */
    selectedOrganisation: string | null;
    /**
     * Selected rollen.
     * @type {Array<string>}
     * @memberof PersonenkontextWorkflowResponse
     */
    selectedRollen: Array<string> | null;
    /**
     * Indicates whether the commit action can be performed.
     * @type {boolean}
     * @memberof PersonenkontextWorkflowResponse
     */
    canCommit: boolean;
}

/**
 * Check if a given object implements the PersonenkontextWorkflowResponse interface.
 */
export function instanceOfPersonenkontextWorkflowResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "organisations" in value;
    isInstance = isInstance && "rollen" in value;
    isInstance = isInstance && "selectedOrganisation" in value;
    isInstance = isInstance && "selectedRollen" in value;
    isInstance = isInstance && "canCommit" in value;

    return isInstance;
}

export function PersonenkontextWorkflowResponseFromJSON(json: any): PersonenkontextWorkflowResponse {
    return PersonenkontextWorkflowResponseFromJSONTyped(json, false);
}

export function PersonenkontextWorkflowResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PersonenkontextWorkflowResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'organisations': ((json['organisations'] as Array<any>).map(OrganisationResponseLegacyFromJSON)),
        'rollen': ((json['rollen'] as Array<any>).map(RolleResponseFromJSON)),
        'selectedOrganisation': json['selectedOrganisation'],
        'selectedRollen': json['selectedRollen'],
        'canCommit': json['canCommit'],
    };
}

export function PersonenkontextWorkflowResponseToJSON(value?: PersonenkontextWorkflowResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'organisations': ((value.organisations as Array<any>).map(OrganisationResponseLegacyToJSON)),
        'rollen': ((value.rollen as Array<any>).map(RolleResponseToJSON)),
        'selectedOrganisation': value.selectedOrganisation,
        'selectedRollen': value.selectedRollen,
        'canCommit': value.canCommit,
    };
}

