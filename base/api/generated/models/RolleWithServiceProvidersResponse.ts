/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RollenArt } from './RollenArt';
import {
    RollenArtFromJSON,
    RollenArtFromJSONTyped,
    RollenArtToJSON,
} from './RollenArt';
import type { RollenMerkmal } from './RollenMerkmal';
import {
    RollenMerkmalFromJSON,
    RollenMerkmalFromJSONTyped,
    RollenMerkmalToJSON,
} from './RollenMerkmal';
import type { ServiceProviderIdNameResponse } from './ServiceProviderIdNameResponse';
import {
    ServiceProviderIdNameResponseFromJSON,
    ServiceProviderIdNameResponseFromJSONTyped,
    ServiceProviderIdNameResponseToJSON,
} from './ServiceProviderIdNameResponse';
import type { SystemRechtResponse } from './SystemRechtResponse';
import {
    SystemRechtResponseFromJSON,
    SystemRechtResponseFromJSONTyped,
    SystemRechtResponseToJSON,
} from './SystemRechtResponse';

/**
 * 
 * @export
 * @interface RolleWithServiceProvidersResponse
 */
export interface RolleWithServiceProvidersResponse {
    /**
     * 
     * @type {string}
     * @memberof RolleWithServiceProvidersResponse
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof RolleWithServiceProvidersResponse
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof RolleWithServiceProvidersResponse
     */
    updatedAt: Date;
    /**
     * 
     * @type {string}
     * @memberof RolleWithServiceProvidersResponse
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof RolleWithServiceProvidersResponse
     */
    administeredBySchulstrukturknoten: string;
    /**
     * 
     * @type {RollenArt}
     * @memberof RolleWithServiceProvidersResponse
     */
    rollenart: RollenArt;
    /**
     * 
     * @type {Set<RollenMerkmal>}
     * @memberof RolleWithServiceProvidersResponse
     */
    merkmale: Set<RollenMerkmal>;
    /**
     * 
     * @type {Set<SystemRechtResponse>}
     * @memberof RolleWithServiceProvidersResponse
     */
    systemrechte: Set<SystemRechtResponse>;
    /**
     * 
     * @type {string}
     * @memberof RolleWithServiceProvidersResponse
     */
    administeredBySchulstrukturknotenName: string | null;
    /**
     * 
     * @type {string}
     * @memberof RolleWithServiceProvidersResponse
     */
    administeredBySchulstrukturknotenKennung: string | null;
    /**
     * 
     * @type {number}
     * @memberof RolleWithServiceProvidersResponse
     */
    version: number;
    /**
     * 
     * @type {Array<ServiceProviderIdNameResponse>}
     * @memberof RolleWithServiceProvidersResponse
     */
    serviceProviders: Array<ServiceProviderIdNameResponse>;
}

/**
 * Check if a given object implements the RolleWithServiceProvidersResponse interface.
 */
export function instanceOfRolleWithServiceProvidersResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "administeredBySchulstrukturknoten" in value;
    isInstance = isInstance && "rollenart" in value;
    isInstance = isInstance && "merkmale" in value;
    isInstance = isInstance && "systemrechte" in value;
    isInstance = isInstance && "administeredBySchulstrukturknotenName" in value;
    isInstance = isInstance && "administeredBySchulstrukturknotenKennung" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "serviceProviders" in value;

    return isInstance;
}

export function RolleWithServiceProvidersResponseFromJSON(json: any): RolleWithServiceProvidersResponse {
    return RolleWithServiceProvidersResponseFromJSONTyped(json, false);
}

export function RolleWithServiceProvidersResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): RolleWithServiceProvidersResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'name': json['name'],
        'administeredBySchulstrukturknoten': json['administeredBySchulstrukturknoten'],
        'rollenart': RollenArtFromJSON(json['rollenart']),
        'merkmale': (new Set((json['merkmale'] as Array<any>).map(RollenMerkmalFromJSON))),
        'systemrechte': (new Set((json['systemrechte'] as Array<any>).map(SystemRechtResponseFromJSON))),
        'administeredBySchulstrukturknotenName': json['administeredBySchulstrukturknotenName'],
        'administeredBySchulstrukturknotenKennung': json['administeredBySchulstrukturknotenKennung'],
        'version': json['version'],
        'serviceProviders': ((json['serviceProviders'] as Array<any>).map(ServiceProviderIdNameResponseFromJSON)),
    };
}

export function RolleWithServiceProvidersResponseToJSON(value?: RolleWithServiceProvidersResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': (value.createdAt.toISOString()),
        'updatedAt': (value.updatedAt.toISOString()),
        'name': value.name,
        'administeredBySchulstrukturknoten': value.administeredBySchulstrukturknoten,
        'rollenart': RollenArtToJSON(value.rollenart),
        'merkmale': (Array.from(value.merkmale as Set<any>).map(RollenMerkmalToJSON)),
        'systemrechte': (Array.from(value.systemrechte as Set<any>).map(SystemRechtResponseToJSON)),
        'administeredBySchulstrukturknotenName': value.administeredBySchulstrukturknotenName,
        'administeredBySchulstrukturknotenKennung': value.administeredBySchulstrukturknotenKennung,
        'version': value.version,
        'serviceProviders': ((value.serviceProviders as Array<any>).map(ServiceProviderIdNameResponseToJSON)),
    };
}

