/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PersonNestedInPersonInfoResponse } from './PersonNestedInPersonInfoResponse';
import {
    PersonNestedInPersonInfoResponseFromJSON,
    PersonNestedInPersonInfoResponseFromJSONTyped,
    PersonNestedInPersonInfoResponseToJSON,
} from './PersonNestedInPersonInfoResponse';
import type { PersonResponseEmail } from './PersonResponseEmail';
import {
    PersonResponseEmailFromJSON,
    PersonResponseEmailFromJSONTyped,
    PersonResponseEmailToJSON,
} from './PersonResponseEmail';
import type { PersonenInfoKontextResponse } from './PersonenInfoKontextResponse';
import {
    PersonenInfoKontextResponseFromJSON,
    PersonenInfoKontextResponseFromJSONTyped,
    PersonenInfoKontextResponseToJSON,
} from './PersonenInfoKontextResponse';

/**
 * 
 * @export
 * @interface PersonInfoResponse
 */
export interface PersonInfoResponse {
    /**
     * 
     * @type {string}
     * @memberof PersonInfoResponse
     */
    pid: string;
    /**
     * 
     * @type {PersonNestedInPersonInfoResponse}
     * @memberof PersonInfoResponse
     */
    person: PersonNestedInPersonInfoResponse;
    /**
     * 
     * @type {Array<PersonenInfoKontextResponse>}
     * @memberof PersonInfoResponse
     */
    personenkontexte: Array<PersonenInfoKontextResponse>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PersonInfoResponse
     */
    gruppen: Array<string>;
    /**
     * 
     * @type {PersonResponseEmail}
     * @memberof PersonInfoResponse
     */
    email: PersonResponseEmail | null;
}

/**
 * Check if a given object implements the PersonInfoResponse interface.
 */
export function instanceOfPersonInfoResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pid" in value;
    isInstance = isInstance && "person" in value;
    isInstance = isInstance && "personenkontexte" in value;
    isInstance = isInstance && "gruppen" in value;
    isInstance = isInstance && "email" in value;

    return isInstance;
}

export function PersonInfoResponseFromJSON(json: any): PersonInfoResponse {
    return PersonInfoResponseFromJSONTyped(json, false);
}

export function PersonInfoResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PersonInfoResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pid': json['pid'],
        'person': PersonNestedInPersonInfoResponseFromJSON(json['person']),
        'personenkontexte': ((json['personenkontexte'] as Array<any>).map(PersonenInfoKontextResponseFromJSON)),
        'gruppen': json['gruppen'],
        'email': PersonResponseEmailFromJSON(json['email']),
    };
}

export function PersonInfoResponseToJSON(value?: PersonInfoResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'pid': value.pid,
        'person': PersonNestedInPersonInfoResponseToJSON(value.person),
        'personenkontexte': ((value.personenkontexte as Array<any>).map(PersonenInfoKontextResponseToJSON)),
        'gruppen': value.gruppen,
        'email': PersonResponseEmailToJSON(value.email),
    };
}

