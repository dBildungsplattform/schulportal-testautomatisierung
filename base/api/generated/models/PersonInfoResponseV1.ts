/* tslint:disable */
/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PersonInfoKontextResponseV1 } from './PersonInfoKontextResponseV1';
import {
    PersonInfoKontextResponseV1FromJSON,
    PersonInfoKontextResponseV1FromJSONTyped,
    PersonInfoKontextResponseV1ToJSON,
} from './PersonInfoKontextResponseV1';
import type { PersonInfoPersonResponseV1 } from './PersonInfoPersonResponseV1';
import {
    PersonInfoPersonResponseV1FromJSON,
    PersonInfoPersonResponseV1FromJSONTyped,
    PersonInfoPersonResponseV1ToJSON,
} from './PersonInfoPersonResponseV1';

/**
 * 
 * @export
 * @interface PersonInfoResponseV1
 */
export interface PersonInfoResponseV1 {
    /**
     * 
     * @type {string}
     * @memberof PersonInfoResponseV1
     */
    pid: string;
    /**
     * 
     * @type {PersonInfoPersonResponseV1}
     * @memberof PersonInfoResponseV1
     */
    person: PersonInfoPersonResponseV1;
    /**
     * 
     * @type {Array<PersonInfoKontextResponseV1>}
     * @memberof PersonInfoResponseV1
     */
    personenkontexte: Array<PersonInfoKontextResponseV1>;
    /**
     * 
     * @type {Array<object>}
     * @memberof PersonInfoResponseV1
     */
    beziehungen: Array<object>;
}

/**
 * Check if a given object implements the PersonInfoResponseV1 interface.
 */
export function instanceOfPersonInfoResponseV1(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pid" in value;
    isInstance = isInstance && "person" in value;
    isInstance = isInstance && "personenkontexte" in value;
    isInstance = isInstance && "beziehungen" in value;

    return isInstance;
}

export function PersonInfoResponseV1FromJSON(json: any): PersonInfoResponseV1 {
    return PersonInfoResponseV1FromJSONTyped(json, false);
}

export function PersonInfoResponseV1FromJSONTyped(json: any, ignoreDiscriminator: boolean): PersonInfoResponseV1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pid': json['pid'],
        'person': PersonInfoPersonResponseV1FromJSON(json['person']),
        'personenkontexte': ((json['personenkontexte'] as Array<any>).map(PersonInfoKontextResponseV1FromJSON)),
        'beziehungen': json['beziehungen'],
    };
}

export function PersonInfoResponseV1ToJSON(value?: PersonInfoResponseV1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'pid': value.pid,
        'person': PersonInfoPersonResponseV1ToJSON(value.person),
        'personenkontexte': ((value.personenkontexte as Array<any>).map(PersonInfoKontextResponseV1ToJSON)),
        'beziehungen': value.beziehungen,
    };
}

