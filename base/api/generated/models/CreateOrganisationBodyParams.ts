/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OrganisationsTyp } from './OrganisationsTyp';
import {
    OrganisationsTypFromJSON,
    OrganisationsTypFromJSONTyped,
    OrganisationsTypToJSON,
} from './OrganisationsTyp';
import type { TraegerschaftTyp } from './TraegerschaftTyp';
import {
    TraegerschaftTypFromJSON,
    TraegerschaftTypFromJSONTyped,
    TraegerschaftTypToJSON,
} from './TraegerschaftTyp';

/**
 * 
 * @export
 * @interface CreateOrganisationBodyParams
 */
export interface CreateOrganisationBodyParams {
    /**
     * 
     * @type {string}
     * @memberof CreateOrganisationBodyParams
     */
    administriertVon: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrganisationBodyParams
     */
    zugehoerigZu: string;
    /**
     * Required, if `typ` is equal to `SCHULE`
     * @type {string}
     * @memberof CreateOrganisationBodyParams
     */
    kennung?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrganisationBodyParams
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrganisationBodyParams
     */
    namensergaenzung?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOrganisationBodyParams
     */
    kuerzel?: string;
    /**
     * 
     * @type {OrganisationsTyp}
     * @memberof CreateOrganisationBodyParams
     */
    typ: OrganisationsTyp;
    /**
     * 
     * @type {TraegerschaftTyp}
     * @memberof CreateOrganisationBodyParams
     */
    traegerschaft?: TraegerschaftTyp;
    /**
     * 
     * @type {string}
     * @memberof CreateOrganisationBodyParams
     */
    emailAdress?: string;
}

/**
 * Check if a given object implements the CreateOrganisationBodyParams interface.
 */
export function instanceOfCreateOrganisationBodyParams(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "administriertVon" in value;
    isInstance = isInstance && "zugehoerigZu" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "typ" in value;

    return isInstance;
}

export function CreateOrganisationBodyParamsFromJSON(json: any): CreateOrganisationBodyParams {
    return CreateOrganisationBodyParamsFromJSONTyped(json, false);
}

export function CreateOrganisationBodyParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateOrganisationBodyParams {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'administriertVon': json['administriertVon'],
        'zugehoerigZu': json['zugehoerigZu'],
        'kennung': !exists(json, 'kennung') ? undefined : json['kennung'],
        'name': json['name'],
        'namensergaenzung': !exists(json, 'namensergaenzung') ? undefined : json['namensergaenzung'],
        'kuerzel': !exists(json, 'kuerzel') ? undefined : json['kuerzel'],
        'typ': OrganisationsTypFromJSON(json['typ']),
        'traegerschaft': !exists(json, 'traegerschaft') ? undefined : TraegerschaftTypFromJSON(json['traegerschaft']),
        'emailAdress': !exists(json, 'emailAdress') ? undefined : json['emailAdress'],
    };
}

export function CreateOrganisationBodyParamsToJSON(value?: CreateOrganisationBodyParams | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'administriertVon': value.administriertVon,
        'zugehoerigZu': value.zugehoerigZu,
        'kennung': value.kennung,
        'name': value.name,
        'namensergaenzung': value.namensergaenzung,
        'kuerzel': value.kuerzel,
        'typ': OrganisationsTypToJSON(value.typ),
        'traegerschaft': TraegerschaftTypToJSON(value.traegerschaft),
        'emailAdress': value.emailAdress,
    };
}

