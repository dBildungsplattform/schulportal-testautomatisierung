/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PersonNameParams
 */
export interface PersonNameParams {
    /**
     * 
     * @type {string}
     * @memberof PersonNameParams
     */
    familienname: string;
    /**
     * 
     * @type {string}
     * @memberof PersonNameParams
     */
    vorname: string;
    /**
     * 
     * @type {string}
     * @memberof PersonNameParams
     */
    initialenfamilienname?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonNameParams
     */
    initialenvorname?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonNameParams
     */
    rufname?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonNameParams
     */
    titel?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PersonNameParams
     */
    anrede?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PersonNameParams
     */
    namenssuffix?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PersonNameParams
     */
    namenspraefix?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PersonNameParams
     */
    sortierindex?: string;
}

/**
 * Check if a given object implements the PersonNameParams interface.
 */
export function instanceOfPersonNameParams(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "familienname" in value;
    isInstance = isInstance && "vorname" in value;

    return isInstance;
}

export function PersonNameParamsFromJSON(json: any): PersonNameParams {
    return PersonNameParamsFromJSONTyped(json, false);
}

export function PersonNameParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PersonNameParams {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'familienname': json['familienname'],
        'vorname': json['vorname'],
        'initialenfamilienname': !exists(json, 'initialenfamilienname') ? undefined : json['initialenfamilienname'],
        'initialenvorname': !exists(json, 'initialenvorname') ? undefined : json['initialenvorname'],
        'rufname': !exists(json, 'rufname') ? undefined : json['rufname'],
        'titel': !exists(json, 'titel') ? undefined : json['titel'],
        'anrede': !exists(json, 'anrede') ? undefined : json['anrede'],
        'namenssuffix': !exists(json, 'namenssuffix') ? undefined : json['namenssuffix'],
        'namenspraefix': !exists(json, 'namenspraefix') ? undefined : json['namenspraefix'],
        'sortierindex': !exists(json, 'sortierindex') ? undefined : json['sortierindex'],
    };
}

export function PersonNameParamsToJSON(value?: PersonNameParams | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'familienname': value.familienname,
        'vorname': value.vorname,
        'initialenfamilienname': value.initialenfamilienname,
        'initialenvorname': value.initialenvorname,
        'rufname': value.rufname,
        'titel': value.titel,
        'anrede': value.anrede,
        'namenssuffix': value.namenssuffix,
        'namenspraefix': value.namenspraefix,
        'sortierindex': value.sortierindex,
    };
}

