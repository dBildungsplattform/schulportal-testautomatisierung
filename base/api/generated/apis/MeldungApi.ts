/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateOrUpdateMeldungBodyParams,
  MeldungResponse,
} from '../models';
import {
    CreateOrUpdateMeldungBodyParamsFromJSON,
    CreateOrUpdateMeldungBodyParamsToJSON,
    MeldungResponseFromJSON,
    MeldungResponseToJSON,
} from '../models';

export interface MeldungControllerCreateOrUpdateMeldungRequest {
    createOrUpdateMeldungBodyParams: CreateOrUpdateMeldungBodyParams;
}

/**
 * MeldungApi - interface
 * 
 * @export
 * @interface MeldungApiInterface
 */
export interface MeldungApiInterface {
    /**
     * 
     * @param {CreateOrUpdateMeldungBodyParams} createOrUpdateMeldungBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeldungApiInterface
     */
    meldungControllerCreateOrUpdateMeldungRaw(requestParameters: MeldungControllerCreateOrUpdateMeldungRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    meldungControllerCreateOrUpdateMeldung(requestParameters: MeldungControllerCreateOrUpdateMeldungRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get all meldungen.
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeldungApiInterface
     */
    meldungControllerGetAllMeldungenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MeldungResponse>>>;

    /**
     * Get all meldungen.
     * 
     */
    meldungControllerGetAllMeldungen(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MeldungResponse>>;

    /**
     * Get current veroeffentlicht meldung.
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeldungApiInterface
     */
    meldungControllerGetCurrentMeldungRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MeldungResponse>>;

    /**
     * Get current veroeffentlicht meldung.
     * 
     */
    meldungControllerGetCurrentMeldung(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MeldungResponse>;

}

/**
 * 
 */
export class MeldungApi extends runtime.BaseAPI implements MeldungApiInterface {

    /**
     */
    async meldungControllerCreateOrUpdateMeldungRaw(requestParameters: MeldungControllerCreateOrUpdateMeldungRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createOrUpdateMeldungBodyParams === null || requestParameters.createOrUpdateMeldungBodyParams === undefined) {
            throw new runtime.RequiredError('createOrUpdateMeldungBodyParams','Required parameter requestParameters.createOrUpdateMeldungBodyParams was null or undefined when calling meldungControllerCreateOrUpdateMeldung.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/portal/meldung`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrUpdateMeldungBodyParamsToJSON(requestParameters.createOrUpdateMeldungBodyParams),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async meldungControllerCreateOrUpdateMeldung(requestParameters: MeldungControllerCreateOrUpdateMeldungRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.meldungControllerCreateOrUpdateMeldungRaw(requestParameters, initOverrides);
    }

    /**
     * Get all meldungen.
     * 
     */
    async meldungControllerGetAllMeldungenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MeldungResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/portal/meldung`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MeldungResponseFromJSON));
    }

    /**
     * Get all meldungen.
     * 
     */
    async meldungControllerGetAllMeldungen(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MeldungResponse>> {
        const response = await this.meldungControllerGetAllMeldungenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get current veroeffentlicht meldung.
     * 
     */
    async meldungControllerGetCurrentMeldungRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MeldungResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/portal/meldung/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeldungResponseFromJSON(jsonValue));
    }

    /**
     * Get current veroeffentlicht meldung.
     * 
     */
    async meldungControllerGetCurrentMeldung(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MeldungResponse> {
        const response = await this.meldungControllerGetCurrentMeldungRaw(initOverrides);
        return await response.value();
    }

}
