/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FindRollenResponse,
} from '../models';
import {
    FindRollenResponseFromJSON,
    FindRollenResponseToJSON,
} from '../models';

export interface PersonAdministrationControllerFindRollenRequest {
    rolleName?: string;
    limit?: number;
}

/**
 * PersonAdministrationApi - interface
 * 
 * @export
 * @interface PersonAdministrationApiInterface
 */
export interface PersonAdministrationApiInterface {
    /**
     * 
     * @param {string} [rolleName] Rolle name used to filter for rollen in personenkontext.
     * @param {number} [limit] The limit of items for the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonAdministrationApiInterface
     */
    personAdministrationControllerFindRollenRaw(requestParameters: PersonAdministrationControllerFindRollenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindRollenResponse>>;

    /**
     */
    personAdministrationControllerFindRollen(requestParameters: PersonAdministrationControllerFindRollenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindRollenResponse>;

}

/**
 * 
 */
export class PersonAdministrationApi extends runtime.BaseAPI implements PersonAdministrationApiInterface {

    /**
     */
    async personAdministrationControllerFindRollenRaw(requestParameters: PersonAdministrationControllerFindRollenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindRollenResponse>> {
        const queryParameters: any = {};

        if (requestParameters.rolleName !== undefined) {
            queryParameters['rolleName'] = requestParameters.rolleName;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/person-administration/rollen`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FindRollenResponseFromJSON(jsonValue));
    }

    /**
     */
    async personAdministrationControllerFindRollen(requestParameters: PersonAdministrationControllerFindRollenRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindRollenResponse> {
        const response = await this.personAdministrationControllerFindRollenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
