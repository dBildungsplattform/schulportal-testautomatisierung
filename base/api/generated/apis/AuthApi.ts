/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UserinfoResponse,
} from '../models';
import {
    UserinfoResponseFromJSON,
    UserinfoResponseToJSON,
} from '../models';

export interface AuthenticationControllerLoginRequest {
    redirectUrl?: string;
}

export interface AuthenticationControllerResetPasswordRequest {
    redirectUrl: string;
    loginHint: string;
}

/**
 * AuthApi - interface
 * 
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     * 
     * @summary Info about logged in user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authenticationControllerInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserinfoResponse>>;

    /**
     * Info about logged in user.
     */
    authenticationControllerInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserinfoResponse>;

    /**
     * 
     * @summary Used to start OIDC authentication.
     * @param {string} [redirectUrl] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authenticationControllerLoginRaw(requestParameters: AuthenticationControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Used to start OIDC authentication.
     */
    authenticationControllerLogin(requestParameters: AuthenticationControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Used to log out the current user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authenticationControllerLogoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Used to log out the current user.
     */
    authenticationControllerLogout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Redirect to Keycloak password reset.
     * @param {string} redirectUrl 
     * @param {string} loginHint 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authenticationControllerResetPasswordRaw(requestParameters: AuthenticationControllerResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Redirect to Keycloak password reset.
     */
    authenticationControllerResetPassword(requestParameters: AuthenticationControllerResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {

    /**
     * Info about logged in user.
     */
    async authenticationControllerInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserinfoResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/auth/logininfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserinfoResponseFromJSON(jsonValue));
    }

    /**
     * Info about logged in user.
     */
    async authenticationControllerInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserinfoResponse> {
        const response = await this.authenticationControllerInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * Used to start OIDC authentication.
     */
    async authenticationControllerLoginRaw(requestParameters: AuthenticationControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.redirectUrl !== undefined) {
            queryParameters['redirectUrl'] = requestParameters.redirectUrl;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/login`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Used to start OIDC authentication.
     */
    async authenticationControllerLogin(requestParameters: AuthenticationControllerLoginRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authenticationControllerLoginRaw(requestParameters, initOverrides);
    }

    /**
     * Used to log out the current user.
     */
    async authenticationControllerLogoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/auth/logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Used to log out the current user.
     */
    async authenticationControllerLogout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authenticationControllerLogoutRaw(initOverrides);
    }

    /**
     * Redirect to Keycloak password reset.
     */
    async authenticationControllerResetPasswordRaw(requestParameters: AuthenticationControllerResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.redirectUrl === null || requestParameters.redirectUrl === undefined) {
            throw new runtime.RequiredError('redirectUrl','Required parameter requestParameters.redirectUrl was null or undefined when calling authenticationControllerResetPassword.');
        }

        if (requestParameters.loginHint === null || requestParameters.loginHint === undefined) {
            throw new runtime.RequiredError('loginHint','Required parameter requestParameters.loginHint was null or undefined when calling authenticationControllerResetPassword.');
        }

        const queryParameters: any = {};

        if (requestParameters.redirectUrl !== undefined) {
            queryParameters['redirectUrl'] = requestParameters.redirectUrl;
        }

        if (requestParameters.loginHint !== undefined) {
            queryParameters['login_hint'] = requestParameters.loginHint;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/reset-password`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Redirect to Keycloak password reset.
     */
    async authenticationControllerResetPassword(requestParameters: AuthenticationControllerResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authenticationControllerResetPasswordRaw(requestParameters, initOverrides);
    }

}
