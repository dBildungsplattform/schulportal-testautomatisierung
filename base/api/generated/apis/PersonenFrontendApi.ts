/* tslint:disable */
/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PersonFrontendControllerFindPersons200Response,
  ScopeOrder,
  SortFieldPerson,
} from '../models';
import {
    PersonFrontendControllerFindPersons200ResponseFromJSON,
    PersonFrontendControllerFindPersons200ResponseToJSON,
    ScopeOrderFromJSON,
    ScopeOrderToJSON,
    SortFieldPersonFromJSON,
    SortFieldPersonToJSON,
} from '../models';

export interface PersonFrontendControllerFindPersonsRequest {
    offset?: number;
    limit?: number;
    username?: string | null;
    familienname?: string | null;
    vorname?: string | null;
    sichtfreigabe?: PersonFrontendControllerFindPersonsSichtfreigabeEnum;
    organisationIDs?: Array<string>;
    rolleIDs?: Array<string>;
    suchFilter?: string | null;
    sortOrder?: ScopeOrder;
    sortField?: SortFieldPerson;
}

/**
 * PersonenFrontendApi - interface
 * 
 * @export
 * @interface PersonenFrontendApiInterface
 */
export interface PersonenFrontendApiInterface {
    /**
     * 
     * @param {number} [offset] The offset of the paginated list.
     * @param {number} [limit] The requested limit for the page size.
     * @param {string} [username] 
     * @param {string} [familienname] 
     * @param {string} [vorname] 
     * @param {'ja' | 'nein'} [sichtfreigabe] 
     * @param {Array<string>} [organisationIDs] List of Organisation ID used to filter for Persons.
     * @param {Array<string>} [rolleIDs] List of Role ID used to filter for Persons.
     * @param {string} [suchFilter] Search filter used to filter for Persons. It could be the vorname, familienname, username or the personalnummer.
     * @param {ScopeOrder} [sortOrder] Order to sort by.
     * @param {SortFieldPerson} [sortField] Field to sort by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonenFrontendApiInterface
     */
    personFrontendControllerFindPersonsRaw(requestParameters: PersonFrontendControllerFindPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonFrontendControllerFindPersons200Response>>;

    /**
     */
    personFrontendControllerFindPersons(requestParameters: PersonFrontendControllerFindPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonFrontendControllerFindPersons200Response>;

}

/**
 * 
 */
export class PersonenFrontendApi extends runtime.BaseAPI implements PersonenFrontendApiInterface {

    /**
     */
    async personFrontendControllerFindPersonsRaw(requestParameters: PersonFrontendControllerFindPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonFrontendControllerFindPersons200Response>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.familienname !== undefined) {
            queryParameters['familienname'] = requestParameters.familienname;
        }

        if (requestParameters.vorname !== undefined) {
            queryParameters['vorname'] = requestParameters.vorname;
        }

        if (requestParameters.sichtfreigabe !== undefined) {
            queryParameters['sichtfreigabe'] = requestParameters.sichtfreigabe;
        }

        if (requestParameters.organisationIDs) {
            queryParameters['organisationIDs'] = requestParameters.organisationIDs;
        }

        if (requestParameters.rolleIDs) {
            queryParameters['rolleIDs'] = requestParameters.rolleIDs;
        }

        if (requestParameters.suchFilter !== undefined) {
            queryParameters['suchFilter'] = requestParameters.suchFilter;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.sortField !== undefined) {
            queryParameters['sortField'] = requestParameters.sortField;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personen-frontend`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonFrontendControllerFindPersons200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async personFrontendControllerFindPersons(requestParameters: PersonFrontendControllerFindPersonsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonFrontendControllerFindPersons200Response> {
        const response = await this.personFrontendControllerFindPersonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PersonFrontendControllerFindPersonsSichtfreigabeEnum = {
    Ja: 'ja',
    Nein: 'nein'
} as const;
export type PersonFrontendControllerFindPersonsSichtfreigabeEnum = typeof PersonFrontendControllerFindPersonsSichtfreigabeEnum[keyof typeof PersonFrontendControllerFindPersonsSichtfreigabeEnum];
