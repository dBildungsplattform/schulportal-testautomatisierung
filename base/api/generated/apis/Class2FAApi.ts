/* tslint:disable */
/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssignHardwareTokenBodyParams,
  AssignHardwareTokenResponse,
  TokenInitBodyParams,
  TokenRequiredResponse,
  TokenStateResponse,
  TokenVerifyBodyParams,
} from '../models';
import {
    AssignHardwareTokenBodyParamsFromJSON,
    AssignHardwareTokenBodyParamsToJSON,
    AssignHardwareTokenResponseFromJSON,
    AssignHardwareTokenResponseToJSON,
    TokenInitBodyParamsFromJSON,
    TokenInitBodyParamsToJSON,
    TokenRequiredResponseFromJSON,
    TokenRequiredResponseToJSON,
    TokenStateResponseFromJSON,
    TokenStateResponseToJSON,
    TokenVerifyBodyParamsFromJSON,
    TokenVerifyBodyParamsToJSON,
} from '../models';

export interface PrivacyIdeaAdministrationControllerAssignHardwareTokenRequest {
    assignHardwareTokenBodyParams: AssignHardwareTokenBodyParams;
}

export interface PrivacyIdeaAdministrationControllerGetTwoAuthStateRequest {
    personId: string;
}

export interface PrivacyIdeaAdministrationControllerInitializeSoftwareTokenRequest {
    tokenInitBodyParams: TokenInitBodyParams;
}

export interface PrivacyIdeaAdministrationControllerRequiresTwoFactorAuthenticationRequest {
    personId: string;
}

export interface PrivacyIdeaAdministrationControllerResetTokenRequest {
    personId: string;
}

export interface PrivacyIdeaAdministrationControllerVerifyTokenRequest {
    tokenVerifyBodyParams: TokenVerifyBodyParams;
}

/**
 * Class2FAApi - interface
 * 
 * @export
 * @interface Class2FAApiInterface
 */
export interface Class2FAApiInterface {
    /**
     * 
     * @param {AssignHardwareTokenBodyParams} assignHardwareTokenBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class2FAApiInterface
     */
    privacyIdeaAdministrationControllerAssignHardwareTokenRaw(requestParameters: PrivacyIdeaAdministrationControllerAssignHardwareTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssignHardwareTokenResponse>>;

    /**
     */
    privacyIdeaAdministrationControllerAssignHardwareToken(requestParameters: PrivacyIdeaAdministrationControllerAssignHardwareTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssignHardwareTokenResponse>;

    /**
     * 
     * @param {string} personId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class2FAApiInterface
     */
    privacyIdeaAdministrationControllerGetTwoAuthStateRaw(requestParameters: PrivacyIdeaAdministrationControllerGetTwoAuthStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenStateResponse>>;

    /**
     */
    privacyIdeaAdministrationControllerGetTwoAuthState(requestParameters: PrivacyIdeaAdministrationControllerGetTwoAuthStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenStateResponse>;

    /**
     * 
     * @param {TokenInitBodyParams} tokenInitBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class2FAApiInterface
     */
    privacyIdeaAdministrationControllerInitializeSoftwareTokenRaw(requestParameters: PrivacyIdeaAdministrationControllerInitializeSoftwareTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     */
    privacyIdeaAdministrationControllerInitializeSoftwareToken(requestParameters: PrivacyIdeaAdministrationControllerInitializeSoftwareTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * 
     * @param {string} personId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class2FAApiInterface
     */
    privacyIdeaAdministrationControllerRequiresTwoFactorAuthenticationRaw(requestParameters: PrivacyIdeaAdministrationControllerRequiresTwoFactorAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenRequiredResponse>>;

    /**
     */
    privacyIdeaAdministrationControllerRequiresTwoFactorAuthentication(requestParameters: PrivacyIdeaAdministrationControllerRequiresTwoFactorAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenRequiredResponse>;

    /**
     * 
     * @param {string} personId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class2FAApiInterface
     */
    privacyIdeaAdministrationControllerResetTokenRaw(requestParameters: PrivacyIdeaAdministrationControllerResetTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>>;

    /**
     */
    privacyIdeaAdministrationControllerResetToken(requestParameters: PrivacyIdeaAdministrationControllerResetTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean>;

    /**
     * 
     * @param {TokenVerifyBodyParams} tokenVerifyBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Class2FAApiInterface
     */
    privacyIdeaAdministrationControllerVerifyTokenRaw(requestParameters: PrivacyIdeaAdministrationControllerVerifyTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    privacyIdeaAdministrationControllerVerifyToken(requestParameters: PrivacyIdeaAdministrationControllerVerifyTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class Class2FAApi extends runtime.BaseAPI implements Class2FAApiInterface {

    /**
     */
    async privacyIdeaAdministrationControllerAssignHardwareTokenRaw(requestParameters: PrivacyIdeaAdministrationControllerAssignHardwareTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssignHardwareTokenResponse>> {
        if (requestParameters.assignHardwareTokenBodyParams === null || requestParameters.assignHardwareTokenBodyParams === undefined) {
            throw new runtime.RequiredError('assignHardwareTokenBodyParams','Required parameter requestParameters.assignHardwareTokenBodyParams was null or undefined when calling privacyIdeaAdministrationControllerAssignHardwareToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/2fa-token/assign/hardwareToken`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignHardwareTokenBodyParamsToJSON(requestParameters.assignHardwareTokenBodyParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssignHardwareTokenResponseFromJSON(jsonValue));
    }

    /**
     */
    async privacyIdeaAdministrationControllerAssignHardwareToken(requestParameters: PrivacyIdeaAdministrationControllerAssignHardwareTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssignHardwareTokenResponse> {
        const response = await this.privacyIdeaAdministrationControllerAssignHardwareTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async privacyIdeaAdministrationControllerGetTwoAuthStateRaw(requestParameters: PrivacyIdeaAdministrationControllerGetTwoAuthStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenStateResponse>> {
        if (requestParameters.personId === null || requestParameters.personId === undefined) {
            throw new runtime.RequiredError('personId','Required parameter requestParameters.personId was null or undefined when calling privacyIdeaAdministrationControllerGetTwoAuthState.');
        }

        const queryParameters: any = {};

        if (requestParameters.personId !== undefined) {
            queryParameters['personId'] = requestParameters.personId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/2fa-token/state`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenStateResponseFromJSON(jsonValue));
    }

    /**
     */
    async privacyIdeaAdministrationControllerGetTwoAuthState(requestParameters: PrivacyIdeaAdministrationControllerGetTwoAuthStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenStateResponse> {
        const response = await this.privacyIdeaAdministrationControllerGetTwoAuthStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async privacyIdeaAdministrationControllerInitializeSoftwareTokenRaw(requestParameters: PrivacyIdeaAdministrationControllerInitializeSoftwareTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.tokenInitBodyParams === null || requestParameters.tokenInitBodyParams === undefined) {
            throw new runtime.RequiredError('tokenInitBodyParams','Required parameter requestParameters.tokenInitBodyParams was null or undefined when calling privacyIdeaAdministrationControllerInitializeSoftwareToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/2fa-token/init`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenInitBodyParamsToJSON(requestParameters.tokenInitBodyParams),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async privacyIdeaAdministrationControllerInitializeSoftwareToken(requestParameters: PrivacyIdeaAdministrationControllerInitializeSoftwareTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.privacyIdeaAdministrationControllerInitializeSoftwareTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async privacyIdeaAdministrationControllerRequiresTwoFactorAuthenticationRaw(requestParameters: PrivacyIdeaAdministrationControllerRequiresTwoFactorAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenRequiredResponse>> {
        if (requestParameters.personId === null || requestParameters.personId === undefined) {
            throw new runtime.RequiredError('personId','Required parameter requestParameters.personId was null or undefined when calling privacyIdeaAdministrationControllerRequiresTwoFactorAuthentication.');
        }

        const queryParameters: any = {};

        if (requestParameters.personId !== undefined) {
            queryParameters['personId'] = requestParameters.personId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/2fa-token/required`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenRequiredResponseFromJSON(jsonValue));
    }

    /**
     */
    async privacyIdeaAdministrationControllerRequiresTwoFactorAuthentication(requestParameters: PrivacyIdeaAdministrationControllerRequiresTwoFactorAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenRequiredResponse> {
        const response = await this.privacyIdeaAdministrationControllerRequiresTwoFactorAuthenticationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async privacyIdeaAdministrationControllerResetTokenRaw(requestParameters: PrivacyIdeaAdministrationControllerResetTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.personId === null || requestParameters.personId === undefined) {
            throw new runtime.RequiredError('personId','Required parameter requestParameters.personId was null or undefined when calling privacyIdeaAdministrationControllerResetToken.');
        }

        const queryParameters: any = {};

        if (requestParameters.personId !== undefined) {
            queryParameters['personId'] = requestParameters.personId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/2fa-token/reset`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async privacyIdeaAdministrationControllerResetToken(requestParameters: PrivacyIdeaAdministrationControllerResetTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.privacyIdeaAdministrationControllerResetTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async privacyIdeaAdministrationControllerVerifyTokenRaw(requestParameters: PrivacyIdeaAdministrationControllerVerifyTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tokenVerifyBodyParams === null || requestParameters.tokenVerifyBodyParams === undefined) {
            throw new runtime.RequiredError('tokenVerifyBodyParams','Required parameter requestParameters.tokenVerifyBodyParams was null or undefined when calling privacyIdeaAdministrationControllerVerifyToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/2fa-token/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenVerifyBodyParamsToJSON(requestParameters.tokenVerifyBodyParams),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async privacyIdeaAdministrationControllerVerifyToken(requestParameters: PrivacyIdeaAdministrationControllerVerifyTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.privacyIdeaAdministrationControllerVerifyTokenRaw(requestParameters, initOverrides);
    }

}
