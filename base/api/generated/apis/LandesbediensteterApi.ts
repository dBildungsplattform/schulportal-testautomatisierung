/* tslint:disable */
/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DbiamPersonenkontexteUpdateError,
  LandesbediensteterWorkflowCommitBodyParams,
  LandesbediensteterWorkflowStepResponse,
  PersonenkontexteUpdateResponse,
} from '../models';
import {
    DbiamPersonenkontexteUpdateErrorFromJSON,
    DbiamPersonenkontexteUpdateErrorToJSON,
    LandesbediensteterWorkflowCommitBodyParamsFromJSON,
    LandesbediensteterWorkflowCommitBodyParamsToJSON,
    LandesbediensteterWorkflowStepResponseFromJSON,
    LandesbediensteterWorkflowStepResponseToJSON,
    PersonenkontexteUpdateResponseFromJSON,
    PersonenkontexteUpdateResponseToJSON,
} from '../models';

export interface LandesbediensteterControllerCommitRequest {
    personId: string;
    landesbediensteterWorkflowCommitBodyParams: LandesbediensteterWorkflowCommitBodyParams;
}

export interface LandesbediensteterControllerStepRequest {
    organisationId?: string | null;
    rollenIds?: Array<string>;
    rolleName?: string | null;
    organisationName?: string | null;
    limit?: number;
}

/**
 * LandesbediensteterApi - interface
 * 
 * @export
 * @interface LandesbediensteterApiInterface
 */
export interface LandesbediensteterApiInterface {
    /**
     * 
     * @param {string} personId The ID for the person.
     * @param {LandesbediensteterWorkflowCommitBodyParams} landesbediensteterWorkflowCommitBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LandesbediensteterApiInterface
     */
    landesbediensteterControllerCommitRaw(requestParameters: LandesbediensteterControllerCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonenkontexteUpdateResponse>>;

    /**
     */
    landesbediensteterControllerCommit(requestParameters: LandesbediensteterControllerCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonenkontexteUpdateResponse>;

    /**
     * 
     * @param {string} [organisationId] ID of the organisation to filter the rollen later
     * @param {Array<string>} [rollenIds] IDs of the rollen.
     * @param {string} [rolleName] Rolle name used to filter for rollen in personenkontext.
     * @param {string} [organisationName] Organisation/SSK name used to filter for schulstrukturknoten in personenkontext.
     * @param {number} [limit] The limit of items for the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LandesbediensteterApiInterface
     */
    landesbediensteterControllerStepRaw(requestParameters: LandesbediensteterControllerStepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LandesbediensteterWorkflowStepResponse>>;

    /**
     */
    landesbediensteterControllerStep(requestParameters: LandesbediensteterControllerStepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LandesbediensteterWorkflowStepResponse>;

}

/**
 * 
 */
export class LandesbediensteterApi extends runtime.BaseAPI implements LandesbediensteterApiInterface {

    /**
     */
    async landesbediensteterControllerCommitRaw(requestParameters: LandesbediensteterControllerCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonenkontexteUpdateResponse>> {
        if (requestParameters.personId === null || requestParameters.personId === undefined) {
            throw new runtime.RequiredError('personId','Required parameter requestParameters.personId was null or undefined when calling landesbediensteterControllerCommit.');
        }

        if (requestParameters.landesbediensteterWorkflowCommitBodyParams === null || requestParameters.landesbediensteterWorkflowCommitBodyParams === undefined) {
            throw new runtime.RequiredError('landesbediensteterWorkflowCommitBodyParams','Required parameter requestParameters.landesbediensteterWorkflowCommitBodyParams was null or undefined when calling landesbediensteterControllerCommit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/landesbediensteter/{personId}`.replace(`{${"personId"}}`, encodeURIComponent(String(requestParameters.personId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LandesbediensteterWorkflowCommitBodyParamsToJSON(requestParameters.landesbediensteterWorkflowCommitBodyParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonenkontexteUpdateResponseFromJSON(jsonValue));
    }

    /**
     */
    async landesbediensteterControllerCommit(requestParameters: LandesbediensteterControllerCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonenkontexteUpdateResponse> {
        const response = await this.landesbediensteterControllerCommitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async landesbediensteterControllerStepRaw(requestParameters: LandesbediensteterControllerStepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LandesbediensteterWorkflowStepResponse>> {
        const queryParameters: any = {};

        if (requestParameters.organisationId !== undefined) {
            queryParameters['organisationId'] = requestParameters.organisationId;
        }

        if (requestParameters.rollenIds) {
            queryParameters['rollenIds'] = requestParameters.rollenIds;
        }

        if (requestParameters.rolleName !== undefined) {
            queryParameters['rolleName'] = requestParameters.rolleName;
        }

        if (requestParameters.organisationName !== undefined) {
            queryParameters['organisationName'] = requestParameters.organisationName;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/landesbediensteter/step`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LandesbediensteterWorkflowStepResponseFromJSON(jsonValue));
    }

    /**
     */
    async landesbediensteterControllerStep(requestParameters: LandesbediensteterControllerStepRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LandesbediensteterWorkflowStepResponse> {
        const response = await this.landesbediensteterControllerStepRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
