/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ManageableServiceProviderResponse,
  ProviderControllerGetManageableServiceProviders200Response,
  ServiceProviderResponse,
} from '../models';
import {
    ManageableServiceProviderResponseFromJSON,
    ManageableServiceProviderResponseToJSON,
    ProviderControllerGetManageableServiceProviders200ResponseFromJSON,
    ProviderControllerGetManageableServiceProviders200ResponseToJSON,
    ServiceProviderResponseFromJSON,
    ServiceProviderResponseToJSON,
} from '../models';

export interface ProviderControllerGetManageableServiceProviderByIdRequest {
    angebotId: string;
}

export interface ProviderControllerGetManageableServiceProvidersRequest {
    offset?: number;
    limit?: number;
}

export interface ProviderControllerGetServiceProviderLogoRequest {
    angebotId: string;
}

/**
 * ProviderApi - interface
 * 
 * @export
 * @interface ProviderApiInterface
 */
export interface ProviderApiInterface {
    /**
     * Get all service-providers.
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    providerControllerGetAllServiceProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceProviderResponse>>>;

    /**
     * Get all service-providers.
     * 
     */
    providerControllerGetAllServiceProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceProviderResponse>>;

    /**
     * Get service-providers available for logged-in user.
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    providerControllerGetAvailableServiceProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceProviderResponse>>>;

    /**
     * Get service-providers available for logged-in user.
     * 
     */
    providerControllerGetAvailableServiceProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceProviderResponse>>;

    /**
     * Get service-provider the logged-in user is allowed to manage.
     * @summary 
     * @param {string} angebotId The id of the service provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    providerControllerGetManageableServiceProviderByIdRaw(requestParameters: ProviderControllerGetManageableServiceProviderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManageableServiceProviderResponse>>;

    /**
     * Get service-provider the logged-in user is allowed to manage.
     * 
     */
    providerControllerGetManageableServiceProviderById(requestParameters: ProviderControllerGetManageableServiceProviderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManageableServiceProviderResponse>;

    /**
     * Get service-providers the logged-in user is allowed to manage.
     * @summary 
     * @param {number} [offset] The offset of the paginated list.
     * @param {number} [limit] The requested limit for the page size.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    providerControllerGetManageableServiceProvidersRaw(requestParameters: ProviderControllerGetManageableServiceProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProviderControllerGetManageableServiceProviders200Response>>;

    /**
     * Get service-providers the logged-in user is allowed to manage.
     * 
     */
    providerControllerGetManageableServiceProviders(requestParameters: ProviderControllerGetManageableServiceProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProviderControllerGetManageableServiceProviders200Response>;

    /**
     * 
     * @param {string} angebotId The id of the service provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProviderApiInterface
     */
    providerControllerGetServiceProviderLogoRaw(requestParameters: ProviderControllerGetServiceProviderLogoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     */
    providerControllerGetServiceProviderLogo(requestParameters: ProviderControllerGetServiceProviderLogoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

}

/**
 * 
 */
export class ProviderApi extends runtime.BaseAPI implements ProviderApiInterface {

    /**
     * Get all service-providers.
     * 
     */
    async providerControllerGetAllServiceProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceProviderResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/provider/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceProviderResponseFromJSON));
    }

    /**
     * Get all service-providers.
     * 
     */
    async providerControllerGetAllServiceProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceProviderResponse>> {
        const response = await this.providerControllerGetAllServiceProvidersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get service-providers available for logged-in user.
     * 
     */
    async providerControllerGetAvailableServiceProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceProviderResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/provider`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceProviderResponseFromJSON));
    }

    /**
     * Get service-providers available for logged-in user.
     * 
     */
    async providerControllerGetAvailableServiceProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceProviderResponse>> {
        const response = await this.providerControllerGetAvailableServiceProvidersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get service-provider the logged-in user is allowed to manage.
     * 
     */
    async providerControllerGetManageableServiceProviderByIdRaw(requestParameters: ProviderControllerGetManageableServiceProviderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManageableServiceProviderResponse>> {
        if (requestParameters.angebotId === null || requestParameters.angebotId === undefined) {
            throw new runtime.RequiredError('angebotId','Required parameter requestParameters.angebotId was null or undefined when calling providerControllerGetManageableServiceProviderById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/provider/manageable/{angebotId}`.replace(`{${"angebotId"}}`, encodeURIComponent(String(requestParameters.angebotId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManageableServiceProviderResponseFromJSON(jsonValue));
    }

    /**
     * Get service-provider the logged-in user is allowed to manage.
     * 
     */
    async providerControllerGetManageableServiceProviderById(requestParameters: ProviderControllerGetManageableServiceProviderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManageableServiceProviderResponse> {
        const response = await this.providerControllerGetManageableServiceProviderByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get service-providers the logged-in user is allowed to manage.
     * 
     */
    async providerControllerGetManageableServiceProvidersRaw(requestParameters: ProviderControllerGetManageableServiceProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProviderControllerGetManageableServiceProviders200Response>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/provider/manageable`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderControllerGetManageableServiceProviders200ResponseFromJSON(jsonValue));
    }

    /**
     * Get service-providers the logged-in user is allowed to manage.
     * 
     */
    async providerControllerGetManageableServiceProviders(requestParameters: ProviderControllerGetManageableServiceProvidersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProviderControllerGetManageableServiceProviders200Response> {
        const response = await this.providerControllerGetManageableServiceProvidersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async providerControllerGetServiceProviderLogoRaw(requestParameters: ProviderControllerGetServiceProviderLogoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.angebotId === null || requestParameters.angebotId === undefined) {
            throw new runtime.RequiredError('angebotId','Required parameter requestParameters.angebotId was null or undefined when calling providerControllerGetServiceProviderLogo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/provider/{angebotId}/logo`.replace(`{${"angebotId"}}`, encodeURIComponent(String(requestParameters.angebotId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async providerControllerGetServiceProviderLogo(requestParameters: ProviderControllerGetServiceProviderLogoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.providerControllerGetServiceProviderLogoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
