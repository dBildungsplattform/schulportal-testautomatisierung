/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DbiamPersonError,
  LockUserBodyParams,
  PersonControllerFindPersonenkontexte200Response,
  PersonLandesbediensteterSearchResponse,
  PersonLockResponse,
  PersonMetadataBodyParams,
  PersonendatensatzResponse,
  Personenstatus,
  ScopeOrder,
  Sichtfreigabe,
  SortFieldPerson,
  UpdatePersonBodyParams,
} from '../models';
import {
    DbiamPersonErrorFromJSON,
    DbiamPersonErrorToJSON,
    LockUserBodyParamsFromJSON,
    LockUserBodyParamsToJSON,
    PersonControllerFindPersonenkontexte200ResponseFromJSON,
    PersonControllerFindPersonenkontexte200ResponseToJSON,
    PersonLandesbediensteterSearchResponseFromJSON,
    PersonLandesbediensteterSearchResponseToJSON,
    PersonLockResponseFromJSON,
    PersonLockResponseToJSON,
    PersonMetadataBodyParamsFromJSON,
    PersonMetadataBodyParamsToJSON,
    PersonendatensatzResponseFromJSON,
    PersonendatensatzResponseToJSON,
    PersonenstatusFromJSON,
    PersonenstatusToJSON,
    ScopeOrderFromJSON,
    ScopeOrderToJSON,
    SichtfreigabeFromJSON,
    SichtfreigabeToJSON,
    SortFieldPersonFromJSON,
    SortFieldPersonToJSON,
    UpdatePersonBodyParamsFromJSON,
    UpdatePersonBodyParamsToJSON,
} from '../models';

export interface PersonControllerCreatePersonenkontextRequest {
    personId: string;
}

export interface PersonControllerDeletePersonByIdRequest {
    personId: string;
}

export interface PersonControllerFindLandesbediensteterRequest {
    personalnummer?: string | null;
    primaryEmailAddress?: string | null;
    username?: string | null;
    vorname?: string | null;
    familienname?: string | null;
}

export interface PersonControllerFindPersonByIdRequest {
    personId: string;
}

export interface PersonControllerFindPersonenkontexteRequest {
    personId: string;
    offset?: number;
    limit?: number;
    personId2?: string | null;
    referrer?: string | null;
    personenstatus?: Personenstatus;
    sichtfreigabe?: Sichtfreigabe;
}

export interface PersonControllerFindPersonsRequest {
    offset?: number;
    limit?: number;
    referrer?: string | null;
    familienname?: string | null;
    vorname?: string | null;
    sichtfreigabe?: PersonControllerFindPersonsSichtfreigabeEnum;
    organisationIDs?: Array<string>;
    rolleIDs?: Array<string>;
    suchFilter?: string | null;
    sortOrder?: ScopeOrder;
    sortField?: SortFieldPerson;
}

export interface PersonControllerLockPersonRequest {
    personId: string;
    lockUserBodyParams: LockUserBodyParams;
}

export interface PersonControllerResetPasswordByPersonIdRequest {
    personId: string;
}

export interface PersonControllerResetUEMPasswordByPersonIdRequest {
    personId: string;
}

export interface PersonControllerSyncPersonRequest {
    personId: string;
}

export interface PersonControllerUpdateMetadataRequest {
    personId: string;
    personMetadataBodyParams: PersonMetadataBodyParams;
}

export interface PersonControllerUpdatePersonRequest {
    personId: string;
    updatePersonBodyParams: UpdatePersonBodyParams;
}

/**
 * PersonenApi - interface
 * 
 * @export
 * @interface PersonenApiInterface
 */
export interface PersonenApiInterface {
    /**
     * 
     * @summary 
     * @param {string} personId 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof PersonenApiInterface
     */
    personControllerCreatePersonenkontextRaw(requestParameters: PersonControllerCreatePersonenkontextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * 
     */
    personControllerCreatePersonenkontext(requestParameters: PersonControllerCreatePersonenkontextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} personId The id for the account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonenApiInterface
     */
    personControllerDeletePersonByIdRaw(requestParameters: PersonControllerDeletePersonByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    personControllerDeletePersonById(requestParameters: PersonControllerDeletePersonByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} [personalnummer] 
     * @param {string} [primaryEmailAddress] 
     * @param {string} [username] 
     * @param {string} [vorname] 
     * @param {string} [familienname] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonenApiInterface
     */
    personControllerFindLandesbediensteterRaw(requestParameters: PersonControllerFindLandesbediensteterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PersonLandesbediensteterSearchResponse>>>;

    /**
     */
    personControllerFindLandesbediensteter(requestParameters: PersonControllerFindLandesbediensteterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PersonLandesbediensteterSearchResponse>>;

    /**
     * 
     * @param {string} personId The id for the account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonenApiInterface
     */
    personControllerFindPersonByIdRaw(requestParameters: PersonControllerFindPersonByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonendatensatzResponse>>;

    /**
     */
    personControllerFindPersonById(requestParameters: PersonControllerFindPersonByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonendatensatzResponse>;

    /**
     * 
     * @param {string} personId The id for the account.
     * @param {number} [offset] The offset of the paginated list.
     * @param {number} [limit] The requested limit for the page size.
     * @param {string} [personId2] 
     * @param {string} [referrer] 
     * @param {Personenstatus} [personenstatus] 
     * @param {Sichtfreigabe} [sichtfreigabe] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonenApiInterface
     */
    personControllerFindPersonenkontexteRaw(requestParameters: PersonControllerFindPersonenkontexteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonControllerFindPersonenkontexte200Response>>;

    /**
     */
    personControllerFindPersonenkontexte(requestParameters: PersonControllerFindPersonenkontexteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonControllerFindPersonenkontexte200Response>;

    /**
     * 
     * @param {number} [offset] The offset of the paginated list.
     * @param {number} [limit] The requested limit for the page size.
     * @param {string} [referrer] 
     * @param {string} [familienname] 
     * @param {string} [vorname] 
     * @param {'ja' | 'nein'} [sichtfreigabe] 
     * @param {Array<string>} [organisationIDs] List of Organisation ID used to filter for Persons.
     * @param {Array<string>} [rolleIDs] List of Role ID used to filter for Persons.
     * @param {string} [suchFilter] Search filter used to filter for Persons. It could be the vorname, familienname, referrer or the personalnummer.
     * @param {ScopeOrder} [sortOrder] Order to sort by.
     * @param {SortFieldPerson} [sortField] Field to sort by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonenApiInterface
     */
    personControllerFindPersonsRaw(requestParameters: PersonControllerFindPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PersonendatensatzResponse>>>;

    /**
     */
    personControllerFindPersons(requestParameters: PersonControllerFindPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PersonendatensatzResponse>>;

    /**
     * 
     * @param {string} personId 
     * @param {LockUserBodyParams} lockUserBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonenApiInterface
     */
    personControllerLockPersonRaw(requestParameters: PersonControllerLockPersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonLockResponse>>;

    /**
     */
    personControllerLockPerson(requestParameters: PersonControllerLockPersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonLockResponse>;

    /**
     * 
     * @param {string} personId The id for the account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonenApiInterface
     */
    personControllerResetPasswordByPersonIdRaw(requestParameters: PersonControllerResetPasswordByPersonIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     */
    personControllerResetPasswordByPersonId(requestParameters: PersonControllerResetPasswordByPersonIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonenApiInterface
     */
    personControllerResetUEMPasswordRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     */
    personControllerResetUEMPassword(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * 
     * @param {string} personId The id for the account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonenApiInterface
     */
    personControllerResetUEMPasswordByPersonIdRaw(requestParameters: PersonControllerResetUEMPasswordByPersonIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     */
    personControllerResetUEMPasswordByPersonId(requestParameters: PersonControllerResetUEMPasswordByPersonIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * 
     * @param {string} personId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonenApiInterface
     */
    personControllerSyncPersonRaw(requestParameters: PersonControllerSyncPersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    personControllerSyncPerson(requestParameters: PersonControllerSyncPersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} personId The id for the account.
     * @param {PersonMetadataBodyParams} personMetadataBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonenApiInterface
     */
    personControllerUpdateMetadataRaw(requestParameters: PersonControllerUpdateMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonendatensatzResponse>>;

    /**
     */
    personControllerUpdateMetadata(requestParameters: PersonControllerUpdateMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonendatensatzResponse>;

    /**
     * 
     * @param {string} personId The id for the account.
     * @param {UpdatePersonBodyParams} updatePersonBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonenApiInterface
     */
    personControllerUpdatePersonRaw(requestParameters: PersonControllerUpdatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonendatensatzResponse>>;

    /**
     */
    personControllerUpdatePerson(requestParameters: PersonControllerUpdatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonendatensatzResponse>;

}

/**
 * 
 */
export class PersonenApi extends runtime.BaseAPI implements PersonenApiInterface {

    /**
     * 
     */
    async personControllerCreatePersonenkontextRaw(requestParameters: PersonControllerCreatePersonenkontextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.personId === null || requestParameters.personId === undefined) {
            throw new runtime.RequiredError('personId','Required parameter requestParameters.personId was null or undefined when calling personControllerCreatePersonenkontext.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personen/{personId}/personenkontexte`.replace(`{${"personId"}}`, encodeURIComponent(String(requestParameters.personId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async personControllerCreatePersonenkontext(requestParameters: PersonControllerCreatePersonenkontextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.personControllerCreatePersonenkontextRaw(requestParameters, initOverrides);
    }

    /**
     */
    async personControllerDeletePersonByIdRaw(requestParameters: PersonControllerDeletePersonByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.personId === null || requestParameters.personId === undefined) {
            throw new runtime.RequiredError('personId','Required parameter requestParameters.personId was null or undefined when calling personControllerDeletePersonById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personen/{personId}`.replace(`{${"personId"}}`, encodeURIComponent(String(requestParameters.personId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async personControllerDeletePersonById(requestParameters: PersonControllerDeletePersonByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.personControllerDeletePersonByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async personControllerFindLandesbediensteterRaw(requestParameters: PersonControllerFindLandesbediensteterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PersonLandesbediensteterSearchResponse>>> {
        const queryParameters: any = {};

        if (requestParameters.personalnummer !== undefined) {
            queryParameters['personalnummer'] = requestParameters.personalnummer;
        }

        if (requestParameters.primaryEmailAddress !== undefined) {
            queryParameters['primaryEmailAddress'] = requestParameters.primaryEmailAddress;
        }

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.vorname !== undefined) {
            queryParameters['vorname'] = requestParameters.vorname;
        }

        if (requestParameters.familienname !== undefined) {
            queryParameters['familienname'] = requestParameters.familienname;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personen/landesbediensteter`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PersonLandesbediensteterSearchResponseFromJSON));
    }

    /**
     */
    async personControllerFindLandesbediensteter(requestParameters: PersonControllerFindLandesbediensteterRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PersonLandesbediensteterSearchResponse>> {
        const response = await this.personControllerFindLandesbediensteterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async personControllerFindPersonByIdRaw(requestParameters: PersonControllerFindPersonByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonendatensatzResponse>> {
        if (requestParameters.personId === null || requestParameters.personId === undefined) {
            throw new runtime.RequiredError('personId','Required parameter requestParameters.personId was null or undefined when calling personControllerFindPersonById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personen/{personId}`.replace(`{${"personId"}}`, encodeURIComponent(String(requestParameters.personId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonendatensatzResponseFromJSON(jsonValue));
    }

    /**
     */
    async personControllerFindPersonById(requestParameters: PersonControllerFindPersonByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonendatensatzResponse> {
        const response = await this.personControllerFindPersonByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async personControllerFindPersonenkontexteRaw(requestParameters: PersonControllerFindPersonenkontexteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonControllerFindPersonenkontexte200Response>> {
        if (requestParameters.personId === null || requestParameters.personId === undefined) {
            throw new runtime.RequiredError('personId','Required parameter requestParameters.personId was null or undefined when calling personControllerFindPersonenkontexte.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.personId2 !== undefined) {
            queryParameters['personId'] = requestParameters.personId2;
        }

        if (requestParameters.referrer !== undefined) {
            queryParameters['referrer'] = requestParameters.referrer;
        }

        if (requestParameters.personenstatus !== undefined) {
            queryParameters['personenstatus'] = requestParameters.personenstatus;
        }

        if (requestParameters.sichtfreigabe !== undefined) {
            queryParameters['sichtfreigabe'] = requestParameters.sichtfreigabe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personen/{personId}/personenkontexte`.replace(`{${"personId"}}`, encodeURIComponent(String(requestParameters.personId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonControllerFindPersonenkontexte200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async personControllerFindPersonenkontexte(requestParameters: PersonControllerFindPersonenkontexteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonControllerFindPersonenkontexte200Response> {
        const response = await this.personControllerFindPersonenkontexteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async personControllerFindPersonsRaw(requestParameters: PersonControllerFindPersonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PersonendatensatzResponse>>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.referrer !== undefined) {
            queryParameters['referrer'] = requestParameters.referrer;
        }

        if (requestParameters.familienname !== undefined) {
            queryParameters['familienname'] = requestParameters.familienname;
        }

        if (requestParameters.vorname !== undefined) {
            queryParameters['vorname'] = requestParameters.vorname;
        }

        if (requestParameters.sichtfreigabe !== undefined) {
            queryParameters['sichtfreigabe'] = requestParameters.sichtfreigabe;
        }

        if (requestParameters.organisationIDs) {
            queryParameters['organisationIDs'] = requestParameters.organisationIDs;
        }

        if (requestParameters.rolleIDs) {
            queryParameters['rolleIDs'] = requestParameters.rolleIDs;
        }

        if (requestParameters.suchFilter !== undefined) {
            queryParameters['suchFilter'] = requestParameters.suchFilter;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.sortField !== undefined) {
            queryParameters['sortField'] = requestParameters.sortField;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personen`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PersonendatensatzResponseFromJSON));
    }

    /**
     */
    async personControllerFindPersons(requestParameters: PersonControllerFindPersonsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PersonendatensatzResponse>> {
        const response = await this.personControllerFindPersonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async personControllerLockPersonRaw(requestParameters: PersonControllerLockPersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonLockResponse>> {
        if (requestParameters.personId === null || requestParameters.personId === undefined) {
            throw new runtime.RequiredError('personId','Required parameter requestParameters.personId was null or undefined when calling personControllerLockPerson.');
        }

        if (requestParameters.lockUserBodyParams === null || requestParameters.lockUserBodyParams === undefined) {
            throw new runtime.RequiredError('lockUserBodyParams','Required parameter requestParameters.lockUserBodyParams was null or undefined when calling personControllerLockPerson.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personen/{personId}/lock-user`.replace(`{${"personId"}}`, encodeURIComponent(String(requestParameters.personId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LockUserBodyParamsToJSON(requestParameters.lockUserBodyParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonLockResponseFromJSON(jsonValue));
    }

    /**
     */
    async personControllerLockPerson(requestParameters: PersonControllerLockPersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonLockResponse> {
        const response = await this.personControllerLockPersonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async personControllerResetPasswordByPersonIdRaw(requestParameters: PersonControllerResetPasswordByPersonIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.personId === null || requestParameters.personId === undefined) {
            throw new runtime.RequiredError('personId','Required parameter requestParameters.personId was null or undefined when calling personControllerResetPasswordByPersonId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personen/{personId}/password`.replace(`{${"personId"}}`, encodeURIComponent(String(requestParameters.personId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async personControllerResetPasswordByPersonId(requestParameters: PersonControllerResetPasswordByPersonIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.personControllerResetPasswordByPersonIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async personControllerResetUEMPasswordRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personen/uem-password`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async personControllerResetUEMPassword(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.personControllerResetUEMPasswordRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async personControllerResetUEMPasswordByPersonIdRaw(requestParameters: PersonControllerResetUEMPasswordByPersonIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.personId === null || requestParameters.personId === undefined) {
            throw new runtime.RequiredError('personId','Required parameter requestParameters.personId was null or undefined when calling personControllerResetUEMPasswordByPersonId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personen/{personId}/uem-password`.replace(`{${"personId"}}`, encodeURIComponent(String(requestParameters.personId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async personControllerResetUEMPasswordByPersonId(requestParameters: PersonControllerResetUEMPasswordByPersonIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.personControllerResetUEMPasswordByPersonIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async personControllerSyncPersonRaw(requestParameters: PersonControllerSyncPersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.personId === null || requestParameters.personId === undefined) {
            throw new runtime.RequiredError('personId','Required parameter requestParameters.personId was null or undefined when calling personControllerSyncPerson.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personen/{personId}/sync`.replace(`{${"personId"}}`, encodeURIComponent(String(requestParameters.personId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async personControllerSyncPerson(requestParameters: PersonControllerSyncPersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.personControllerSyncPersonRaw(requestParameters, initOverrides);
    }

    /**
     */
    async personControllerUpdateMetadataRaw(requestParameters: PersonControllerUpdateMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonendatensatzResponse>> {
        if (requestParameters.personId === null || requestParameters.personId === undefined) {
            throw new runtime.RequiredError('personId','Required parameter requestParameters.personId was null or undefined when calling personControllerUpdateMetadata.');
        }

        if (requestParameters.personMetadataBodyParams === null || requestParameters.personMetadataBodyParams === undefined) {
            throw new runtime.RequiredError('personMetadataBodyParams','Required parameter requestParameters.personMetadataBodyParams was null or undefined when calling personControllerUpdateMetadata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personen/{personId}/metadata`.replace(`{${"personId"}}`, encodeURIComponent(String(requestParameters.personId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PersonMetadataBodyParamsToJSON(requestParameters.personMetadataBodyParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonendatensatzResponseFromJSON(jsonValue));
    }

    /**
     */
    async personControllerUpdateMetadata(requestParameters: PersonControllerUpdateMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonendatensatzResponse> {
        const response = await this.personControllerUpdateMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async personControllerUpdatePersonRaw(requestParameters: PersonControllerUpdatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonendatensatzResponse>> {
        if (requestParameters.personId === null || requestParameters.personId === undefined) {
            throw new runtime.RequiredError('personId','Required parameter requestParameters.personId was null or undefined when calling personControllerUpdatePerson.');
        }

        if (requestParameters.updatePersonBodyParams === null || requestParameters.updatePersonBodyParams === undefined) {
            throw new runtime.RequiredError('updatePersonBodyParams','Required parameter requestParameters.updatePersonBodyParams was null or undefined when calling personControllerUpdatePerson.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personen/{personId}`.replace(`{${"personId"}}`, encodeURIComponent(String(requestParameters.personId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePersonBodyParamsToJSON(requestParameters.updatePersonBodyParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonendatensatzResponseFromJSON(jsonValue));
    }

    /**
     */
    async personControllerUpdatePerson(requestParameters: PersonControllerUpdatePersonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonendatensatzResponse> {
        const response = await this.personControllerUpdatePersonRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PersonControllerFindPersonsSichtfreigabeEnum = {
    Ja: 'ja',
    Nein: 'nein'
} as const;
export type PersonControllerFindPersonsSichtfreigabeEnum = typeof PersonControllerFindPersonsSichtfreigabeEnum[keyof typeof PersonControllerFindPersonsSichtfreigabeEnum];
