/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DbiamImportError,
  ImportResultResponse,
  ImportStatus,
  ImportUploadResponse,
  ImportVorgangResponse,
  ImportVorgangStatusResponse,
  ImportvorgangByIdBodyParams,
} from '../models';
import {
    DbiamImportErrorFromJSON,
    DbiamImportErrorToJSON,
    ImportResultResponseFromJSON,
    ImportResultResponseToJSON,
    ImportStatusFromJSON,
    ImportStatusToJSON,
    ImportUploadResponseFromJSON,
    ImportUploadResponseToJSON,
    ImportVorgangResponseFromJSON,
    ImportVorgangResponseToJSON,
    ImportVorgangStatusResponseFromJSON,
    ImportVorgangStatusResponseToJSON,
    ImportvorgangByIdBodyParamsFromJSON,
    ImportvorgangByIdBodyParamsToJSON,
} from '../models';

export interface ImportControllerDeleteImportTransactionRequest {
    importvorgangId: string;
}

export interface ImportControllerDownloadFileRequest {
    importvorgangId: string;
}

export interface ImportControllerExecuteImportRequest {
    importvorgangByIdBodyParams: ImportvorgangByIdBodyParams;
}

export interface ImportControllerFindImportTransactionsRequest {
    offset?: number;
    limit?: number;
    status?: ImportStatus;
    rolleIds?: Array<string>;
    organisationIds?: Array<string>;
}

export interface ImportControllerGetImportStatusRequest {
    importvorgangId: string;
}

export interface ImportControllerGetImportedUsersRequest {
    importvorgangId: string;
    offset?: number;
    limit?: number;
}

export interface ImportControllerUploadFileRequest {
    organisationId: string;
    rolleId: string;
    file: Blob;
}

/**
 * ImportApi - interface
 * 
 * @export
 * @interface ImportApiInterface
 */
export interface ImportApiInterface {
    /**
     * Delete a role by id.
     * @summary 
     * @param {string} importvorgangId The id of an import transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportApiInterface
     */
    importControllerDeleteImportTransactionRaw(requestParameters: ImportControllerDeleteImportTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a role by id.
     * 
     */
    importControllerDeleteImportTransaction(requestParameters: ImportControllerDeleteImportTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Download the import result file by importvorgangId as text file is deprecated, please use the  GET/api/import/importedUsers.
     * @summary 
     * @param {string} importvorgangId The id of an import transaction
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ImportApiInterface
     */
    importControllerDownloadFileRaw(requestParameters: ImportControllerDownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Download the import result file by importvorgangId as text file is deprecated, please use the  GET/api/import/importedUsers.
     * 
     */
    importControllerDownloadFile(requestParameters: ImportControllerDownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * 
     * @param {ImportvorgangByIdBodyParams} importvorgangByIdBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportApiInterface
     */
    importControllerExecuteImportRaw(requestParameters: ImportControllerExecuteImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    importControllerExecuteImport(requestParameters: ImportControllerExecuteImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get the history of import.
     * @summary 
     * @param {number} [offset] The offset of the paginated list.
     * @param {number} [limit] The requested limit for the page size.
     * @param {ImportStatus} [status] 
     * @param {Array<string>} [rolleIds] 
     * @param {Array<string>} [organisationIds] Liefert Importvorg채nge mit den angegebenen IDs, selbst wenn andere Filterkriterien nicht zutreffen (ODER-verkn체pft mit anderen Kriterien).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportApiInterface
     */
    importControllerFindImportTransactionsRaw(requestParameters: ImportControllerFindImportTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ImportVorgangResponse>>>;

    /**
     * Get the history of import.
     * 
     */
    importControllerFindImportTransactions(requestParameters: ImportControllerFindImportTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ImportVorgangResponse>>;

    /**
     * Get status for the import transaction by id.
     * @summary 
     * @param {string} importvorgangId The id of an import transaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportApiInterface
     */
    importControllerGetImportStatusRaw(requestParameters: ImportControllerGetImportStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImportVorgangStatusResponse>>;

    /**
     * Get status for the import transaction by id.
     * 
     */
    importControllerGetImportStatus(requestParameters: ImportControllerGetImportStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImportVorgangStatusResponse>;

    /**
     * Get the list of imported users. The maximum limit is 100. After receiving all the imported users, please use the DELETE endpoint to remove imported data.
     * @summary 
     * @param {string} importvorgangId Liefert importierte Nutzerdaten f체r die angegebene ID, selbst wenn andere Filterkriterien nicht zutreffen (ODER-verkn체pft mit anderen Kriterien).
     * @param {number} [offset] The offset of the paginated list.
     * @param {number} [limit] The requested limit for the page size.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportApiInterface
     */
    importControllerGetImportedUsersRaw(requestParameters: ImportControllerGetImportedUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImportResultResponse>>;

    /**
     * Get the list of imported users. The maximum limit is 100. After receiving all the imported users, please use the DELETE endpoint to remove imported data.
     * 
     */
    importControllerGetImportedUsers(requestParameters: ImportControllerGetImportedUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImportResultResponse>;

    /**
     * 
     * @param {string} organisationId 
     * @param {string} rolleId 
     * @param {Blob} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportApiInterface
     */
    importControllerUploadFileRaw(requestParameters: ImportControllerUploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImportUploadResponse>>;

    /**
     */
    importControllerUploadFile(requestParameters: ImportControllerUploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImportUploadResponse>;

}

/**
 * 
 */
export class ImportApi extends runtime.BaseAPI implements ImportApiInterface {

    /**
     * Delete a role by id.
     * 
     */
    async importControllerDeleteImportTransactionRaw(requestParameters: ImportControllerDeleteImportTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.importvorgangId === null || requestParameters.importvorgangId === undefined) {
            throw new runtime.RequiredError('importvorgangId','Required parameter requestParameters.importvorgangId was null or undefined when calling importControllerDeleteImportTransaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/import/{importvorgangId}`.replace(`{${"importvorgangId"}}`, encodeURIComponent(String(requestParameters.importvorgangId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a role by id.
     * 
     */
    async importControllerDeleteImportTransaction(requestParameters: ImportControllerDeleteImportTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.importControllerDeleteImportTransactionRaw(requestParameters, initOverrides);
    }

    /**
     * Download the import result file by importvorgangId as text file is deprecated, please use the  GET/api/import/importedUsers.
     * 
     */
    async importControllerDownloadFileRaw(requestParameters: ImportControllerDownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.importvorgangId === null || requestParameters.importvorgangId === undefined) {
            throw new runtime.RequiredError('importvorgangId','Required parameter requestParameters.importvorgangId was null or undefined when calling importControllerDownloadFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/import/{importvorgangId}/download`.replace(`{${"importvorgangId"}}`, encodeURIComponent(String(requestParameters.importvorgangId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Download the import result file by importvorgangId as text file is deprecated, please use the  GET/api/import/importedUsers.
     * 
     */
    async importControllerDownloadFile(requestParameters: ImportControllerDownloadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.importControllerDownloadFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async importControllerExecuteImportRaw(requestParameters: ImportControllerExecuteImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.importvorgangByIdBodyParams === null || requestParameters.importvorgangByIdBodyParams === undefined) {
            throw new runtime.RequiredError('importvorgangByIdBodyParams','Required parameter requestParameters.importvorgangByIdBodyParams was null or undefined when calling importControllerExecuteImport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/import/execute`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportvorgangByIdBodyParamsToJSON(requestParameters.importvorgangByIdBodyParams),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async importControllerExecuteImport(requestParameters: ImportControllerExecuteImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.importControllerExecuteImportRaw(requestParameters, initOverrides);
    }

    /**
     * Get the history of import.
     * 
     */
    async importControllerFindImportTransactionsRaw(requestParameters: ImportControllerFindImportTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ImportVorgangResponse>>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.rolleIds) {
            queryParameters['rolleIds'] = requestParameters.rolleIds;
        }

        if (requestParameters.organisationIds) {
            queryParameters['organisationIds'] = requestParameters.organisationIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/import/history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ImportVorgangResponseFromJSON));
    }

    /**
     * Get the history of import.
     * 
     */
    async importControllerFindImportTransactions(requestParameters: ImportControllerFindImportTransactionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ImportVorgangResponse>> {
        const response = await this.importControllerFindImportTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get status for the import transaction by id.
     * 
     */
    async importControllerGetImportStatusRaw(requestParameters: ImportControllerGetImportStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImportVorgangStatusResponse>> {
        if (requestParameters.importvorgangId === null || requestParameters.importvorgangId === undefined) {
            throw new runtime.RequiredError('importvorgangId','Required parameter requestParameters.importvorgangId was null or undefined when calling importControllerGetImportStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/import/{importvorgangId}/status`.replace(`{${"importvorgangId"}}`, encodeURIComponent(String(requestParameters.importvorgangId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImportVorgangStatusResponseFromJSON(jsonValue));
    }

    /**
     * Get status for the import transaction by id.
     * 
     */
    async importControllerGetImportStatus(requestParameters: ImportControllerGetImportStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImportVorgangStatusResponse> {
        const response = await this.importControllerGetImportStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the list of imported users. The maximum limit is 100. After receiving all the imported users, please use the DELETE endpoint to remove imported data.
     * 
     */
    async importControllerGetImportedUsersRaw(requestParameters: ImportControllerGetImportedUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImportResultResponse>> {
        if (requestParameters.importvorgangId === null || requestParameters.importvorgangId === undefined) {
            throw new runtime.RequiredError('importvorgangId','Required parameter requestParameters.importvorgangId was null or undefined when calling importControllerGetImportedUsers.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.importvorgangId !== undefined) {
            queryParameters['importvorgangId'] = requestParameters.importvorgangId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/import/importedUsers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImportResultResponseFromJSON(jsonValue));
    }

    /**
     * Get the list of imported users. The maximum limit is 100. After receiving all the imported users, please use the DELETE endpoint to remove imported data.
     * 
     */
    async importControllerGetImportedUsers(requestParameters: ImportControllerGetImportedUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImportResultResponse> {
        const response = await this.importControllerGetImportedUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async importControllerUploadFileRaw(requestParameters: ImportControllerUploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImportUploadResponse>> {
        if (requestParameters.organisationId === null || requestParameters.organisationId === undefined) {
            throw new runtime.RequiredError('organisationId','Required parameter requestParameters.organisationId was null or undefined when calling importControllerUploadFile.');
        }

        if (requestParameters.rolleId === null || requestParameters.rolleId === undefined) {
            throw new runtime.RequiredError('rolleId','Required parameter requestParameters.rolleId was null or undefined when calling importControllerUploadFile.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling importControllerUploadFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.organisationId !== undefined) {
            formParams.append('organisationId', requestParameters.organisationId as any);
        }

        if (requestParameters.rolleId !== undefined) {
            formParams.append('rolleId', requestParameters.rolleId as any);
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/api/import/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImportUploadResponseFromJSON(jsonValue));
    }

    /**
     */
    async importControllerUploadFile(requestParameters: ImportControllerUploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImportUploadResponse> {
        const response = await this.importControllerUploadFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
