/* tslint:disable */
/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeleteRevisionBodyParams,
  PersonendatensatzResponseAutomapper,
  PersonenkontextResponse,
  PersonenkontextdatensatzResponse,
  Personenstatus,
  Sichtfreigabe,
} from '../models';
import {
    DeleteRevisionBodyParamsFromJSON,
    DeleteRevisionBodyParamsToJSON,
    PersonendatensatzResponseAutomapperFromJSON,
    PersonendatensatzResponseAutomapperToJSON,
    PersonenkontextResponseFromJSON,
    PersonenkontextResponseToJSON,
    PersonenkontextdatensatzResponseFromJSON,
    PersonenkontextdatensatzResponseToJSON,
    PersonenstatusFromJSON,
    PersonenstatusToJSON,
    SichtfreigabeFromJSON,
    SichtfreigabeToJSON,
} from '../models';

export interface PersonenkontextControllerDeletePersonenkontextByIdRequest {
    personenkontextId: string;
    deleteRevisionBodyParams: DeleteRevisionBodyParams;
}

export interface PersonenkontextControllerFindPersonenkontextByIdRequest {
    personenkontextId: string;
}

export interface PersonenkontextControllerFindPersonenkontexteRequest {
    offset?: number;
    limit?: number;
    personId?: string | null;
    username?: string | null;
    personenstatus?: Personenstatus;
    sichtfreigabe?: Sichtfreigabe;
}

export interface PersonenkontextControllerUpdatePersonenkontextWithIdRequest {
    personenkontextId: string;
}

/**
 * PersonenkontexteApi - interface
 * 
 * @export
 * @interface PersonenkontexteApiInterface
 */
export interface PersonenkontexteApiInterface {
    /**
     * 
     * @param {string} personenkontextId The id for the personenkontext.
     * @param {DeleteRevisionBodyParams} deleteRevisionBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonenkontexteApiInterface
     */
    personenkontextControllerDeletePersonenkontextByIdRaw(requestParameters: PersonenkontextControllerDeletePersonenkontextByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    personenkontextControllerDeletePersonenkontextById(requestParameters: PersonenkontextControllerDeletePersonenkontextByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} personenkontextId The id for the personenkontext.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonenkontexteApiInterface
     */
    personenkontextControllerFindPersonenkontextByIdRaw(requestParameters: PersonenkontextControllerFindPersonenkontextByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonendatensatzResponseAutomapper>>;

    /**
     */
    personenkontextControllerFindPersonenkontextById(requestParameters: PersonenkontextControllerFindPersonenkontextByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonendatensatzResponseAutomapper>;

    /**
     * 
     * @param {number} [offset] The offset of the paginated list.
     * @param {number} [limit] The requested limit for the page size.
     * @param {string} [personId] 
     * @param {string} [username] 
     * @param {Personenstatus} [personenstatus] 
     * @param {Sichtfreigabe} [sichtfreigabe] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonenkontexteApiInterface
     */
    personenkontextControllerFindPersonenkontexteRaw(requestParameters: PersonenkontextControllerFindPersonenkontexteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PersonenkontextdatensatzResponse>>>;

    /**
     */
    personenkontextControllerFindPersonenkontexte(requestParameters: PersonenkontextControllerFindPersonenkontexteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PersonenkontextdatensatzResponse>>;

    /**
     * 
     * @summary 
     * @param {string} personenkontextId 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof PersonenkontexteApiInterface
     */
    personenkontextControllerUpdatePersonenkontextWithIdRaw(requestParameters: PersonenkontextControllerUpdatePersonenkontextWithIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonenkontextResponse>>;

    /**
     * 
     */
    personenkontextControllerUpdatePersonenkontextWithId(requestParameters: PersonenkontextControllerUpdatePersonenkontextWithIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonenkontextResponse>;

}

/**
 * 
 */
export class PersonenkontexteApi extends runtime.BaseAPI implements PersonenkontexteApiInterface {

    /**
     */
    async personenkontextControllerDeletePersonenkontextByIdRaw(requestParameters: PersonenkontextControllerDeletePersonenkontextByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.personenkontextId === null || requestParameters.personenkontextId === undefined) {
            throw new runtime.RequiredError('personenkontextId','Required parameter requestParameters.personenkontextId was null or undefined when calling personenkontextControllerDeletePersonenkontextById.');
        }

        if (requestParameters.deleteRevisionBodyParams === null || requestParameters.deleteRevisionBodyParams === undefined) {
            throw new runtime.RequiredError('deleteRevisionBodyParams','Required parameter requestParameters.deleteRevisionBodyParams was null or undefined when calling personenkontextControllerDeletePersonenkontextById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personenkontexte/{personenkontextId}`.replace(`{${"personenkontextId"}}`, encodeURIComponent(String(requestParameters.personenkontextId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteRevisionBodyParamsToJSON(requestParameters.deleteRevisionBodyParams),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async personenkontextControllerDeletePersonenkontextById(requestParameters: PersonenkontextControllerDeletePersonenkontextByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.personenkontextControllerDeletePersonenkontextByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async personenkontextControllerFindPersonenkontextByIdRaw(requestParameters: PersonenkontextControllerFindPersonenkontextByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonendatensatzResponseAutomapper>> {
        if (requestParameters.personenkontextId === null || requestParameters.personenkontextId === undefined) {
            throw new runtime.RequiredError('personenkontextId','Required parameter requestParameters.personenkontextId was null or undefined when calling personenkontextControllerFindPersonenkontextById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personenkontexte/{personenkontextId}`.replace(`{${"personenkontextId"}}`, encodeURIComponent(String(requestParameters.personenkontextId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonendatensatzResponseAutomapperFromJSON(jsonValue));
    }

    /**
     */
    async personenkontextControllerFindPersonenkontextById(requestParameters: PersonenkontextControllerFindPersonenkontextByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonendatensatzResponseAutomapper> {
        const response = await this.personenkontextControllerFindPersonenkontextByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async personenkontextControllerFindPersonenkontexteRaw(requestParameters: PersonenkontextControllerFindPersonenkontexteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PersonenkontextdatensatzResponse>>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.personId !== undefined) {
            queryParameters['personId'] = requestParameters.personId;
        }

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.personenstatus !== undefined) {
            queryParameters['personenstatus'] = requestParameters.personenstatus;
        }

        if (requestParameters.sichtfreigabe !== undefined) {
            queryParameters['sichtfreigabe'] = requestParameters.sichtfreigabe;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personenkontexte`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PersonenkontextdatensatzResponseFromJSON));
    }

    /**
     */
    async personenkontextControllerFindPersonenkontexte(requestParameters: PersonenkontextControllerFindPersonenkontexteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PersonenkontextdatensatzResponse>> {
        const response = await this.personenkontextControllerFindPersonenkontexteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async personenkontextControllerUpdatePersonenkontextWithIdRaw(requestParameters: PersonenkontextControllerUpdatePersonenkontextWithIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonenkontextResponse>> {
        if (requestParameters.personenkontextId === null || requestParameters.personenkontextId === undefined) {
            throw new runtime.RequiredError('personenkontextId','Required parameter requestParameters.personenkontextId was null or undefined when calling personenkontextControllerUpdatePersonenkontextWithId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personenkontexte/{personenkontextId}`.replace(`{${"personenkontextId"}}`, encodeURIComponent(String(requestParameters.personenkontextId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonenkontextResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async personenkontextControllerUpdatePersonenkontextWithId(requestParameters: PersonenkontextControllerUpdatePersonenkontextWithIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonenkontextResponse> {
        const response = await this.personenkontextControllerUpdatePersonenkontextWithIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
