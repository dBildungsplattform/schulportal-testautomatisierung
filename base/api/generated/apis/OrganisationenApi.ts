/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateOrganisationBodyParams,
  DbiamOrganisationError,
  OrganisationByIdBodyParams,
  OrganisationByNameBodyParams,
  OrganisationResponse,
  OrganisationResponseLegacy,
  OrganisationRootChildrenResponse,
  OrganisationsTyp,
  ParentOrganisationenResponse,
  ParentOrganisationsByIdsBodyParams,
  RollenSystemRechtEnum,
  UpdateOrganisationBodyParams,
} from '../models';
import {
    CreateOrganisationBodyParamsFromJSON,
    CreateOrganisationBodyParamsToJSON,
    DbiamOrganisationErrorFromJSON,
    DbiamOrganisationErrorToJSON,
    OrganisationByIdBodyParamsFromJSON,
    OrganisationByIdBodyParamsToJSON,
    OrganisationByNameBodyParamsFromJSON,
    OrganisationByNameBodyParamsToJSON,
    OrganisationResponseFromJSON,
    OrganisationResponseToJSON,
    OrganisationResponseLegacyFromJSON,
    OrganisationResponseLegacyToJSON,
    OrganisationRootChildrenResponseFromJSON,
    OrganisationRootChildrenResponseToJSON,
    OrganisationsTypFromJSON,
    OrganisationsTypToJSON,
    ParentOrganisationenResponseFromJSON,
    ParentOrganisationenResponseToJSON,
    ParentOrganisationsByIdsBodyParamsFromJSON,
    ParentOrganisationsByIdsBodyParamsToJSON,
    RollenSystemRechtEnumFromJSON,
    RollenSystemRechtEnumToJSON,
    UpdateOrganisationBodyParamsFromJSON,
    UpdateOrganisationBodyParamsToJSON,
} from '../models';

export interface OrganisationControllerAddZugehoerigeOrganisationRequest {
    organisationId: string;
    organisationByIdBodyParams: OrganisationByIdBodyParams;
}

export interface OrganisationControllerCreateOrganisationRequest {
    createOrganisationBodyParams: CreateOrganisationBodyParams;
}

export interface OrganisationControllerDeleteKlasseRequest {
    organisationId: string;
}

export interface OrganisationControllerEnableForitslearningRequest {
    organisationId: string;
}

export interface OrganisationControllerFindOrganisationByIdRequest {
    organisationId: string;
}

export interface OrganisationControllerFindOrganizationsRequest {
    offset?: number;
    limit?: number;
    kennung?: string | null;
    name?: string | null;
    searchString?: string | null;
    typ?: OrganisationsTyp;
    systemrechte?: Array<RollenSystemRechtEnum>;
    excludeTyp?: Array<OrganisationsTyp>;
    administriertVon?: Array<string>;
    zugehoerigZu?: Array<string>;
    organisationIds?: Array<string>;
    sortOrder?: OrganisationControllerFindOrganizationsSortOrderEnum;
    sortField?: OrganisationControllerFindOrganizationsSortFieldEnum;
}

export interface OrganisationControllerGetAdministrierteOrganisationenRequest {
    organisationId: string;
    offset?: number;
    limit?: number;
    searchFilter?: string | null;
}

export interface OrganisationControllerGetParentsByIdsRequest {
    parentOrganisationsByIdsBodyParams: ParentOrganisationsByIdsBodyParams;
}

export interface OrganisationControllerGetZugehoerigeOrganisationenRequest {
    organisationId: string;
}

export interface OrganisationControllerUpdateOrganisationRequest {
    organisationId: string;
    updateOrganisationBodyParams: UpdateOrganisationBodyParams;
}

export interface OrganisationControllerUpdateOrganisationNameRequest {
    organisationId: string;
    organisationByNameBodyParams: OrganisationByNameBodyParams;
}

/**
 * OrganisationenApi - interface
 * 
 * @export
 * @interface OrganisationenApiInterface
 */
export interface OrganisationenApiInterface {
    /**
     * 
     * @param {string} organisationId The id of an organization
     * @param {OrganisationByIdBodyParams} organisationByIdBodyParams The ID of the child organisation that will be assigned to the parent organisation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationenApiInterface
     */
    organisationControllerAddZugehoerigeOrganisationRaw(requestParameters: OrganisationControllerAddZugehoerigeOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    organisationControllerAddZugehoerigeOrganisation(requestParameters: OrganisationControllerAddZugehoerigeOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {CreateOrganisationBodyParams} createOrganisationBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationenApiInterface
     */
    organisationControllerCreateOrganisationRaw(requestParameters: OrganisationControllerCreateOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationResponse>>;

    /**
     */
    organisationControllerCreateOrganisation(requestParameters: OrganisationControllerCreateOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationResponse>;

    /**
     * Delete an organisation of type Klasse by id.
     * @summary 
     * @param {string} organisationId The id of an organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationenApiInterface
     */
    organisationControllerDeleteKlasseRaw(requestParameters: OrganisationControllerDeleteKlasseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an organisation of type Klasse by id.
     * 
     */
    organisationControllerDeleteKlasse(requestParameters: OrganisationControllerDeleteKlasseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} organisationId The id of an organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationenApiInterface
     */
    organisationControllerEnableForitslearningRaw(requestParameters: OrganisationControllerEnableForitslearningRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationResponseLegacy>>;

    /**
     */
    organisationControllerEnableForitslearning(requestParameters: OrganisationControllerEnableForitslearningRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationResponseLegacy>;

    /**
     * 
     * @param {string} organisationId The id of an organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationenApiInterface
     */
    organisationControllerFindOrganisationByIdRaw(requestParameters: OrganisationControllerFindOrganisationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationResponse>>;

    /**
     */
    organisationControllerFindOrganisationById(requestParameters: OrganisationControllerFindOrganisationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationResponse>;

    /**
     * 
     * @param {number} [offset] The offset of the paginated list.
     * @param {number} [limit] The requested limit for the page size.
     * @param {string} [kennung] 
     * @param {string} [name] 
     * @param {string} [searchString] 
     * @param {OrganisationsTyp} [typ] 
     * @param {Array<RollenSystemRechtEnum>} [systemrechte] 
     * @param {Array<OrganisationsTyp>} [excludeTyp] 
     * @param {Array<string>} [administriertVon] 
     * @param {Array<string>} [zugehoerigZu] Liefert die Kind-Organisationen, die den angegebenen IDs zugehörig sind.
     * @param {Array<string>} [organisationIds] Liefert Organisationen mit den angegebenen IDs, selbst wenn andere Filterkriterien nicht zutreffen (ODER-verknüpft mit anderen Kriterien).
     * @param {'asc' | 'desc'} [sortOrder] Order to sort by.
     * @param {'name' | 'kennung'} [sortField] Field to sort by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationenApiInterface
     */
    organisationControllerFindOrganizationsRaw(requestParameters: OrganisationControllerFindOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationResponse>>>;

    /**
     */
    organisationControllerFindOrganizations(requestParameters: OrganisationControllerFindOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationResponse>>;

    /**
     * 
     * @param {string} organisationId The id of an organization
     * @param {number} [offset] The offset of the paginated list.
     * @param {number} [limit] The requested limit for the page size.
     * @param {string} [searchFilter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationenApiInterface
     */
    organisationControllerGetAdministrierteOrganisationenRaw(requestParameters: OrganisationControllerGetAdministrierteOrganisationenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationResponse>>>;

    /**
     */
    organisationControllerGetAdministrierteOrganisationen(requestParameters: OrganisationControllerGetAdministrierteOrganisationenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationResponse>>;

    /**
     * 
     * @param {ParentOrganisationsByIdsBodyParams} parentOrganisationsByIdsBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationenApiInterface
     */
    organisationControllerGetParentsByIdsRaw(requestParameters: OrganisationControllerGetParentsByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ParentOrganisationenResponse>>;

    /**
     */
    organisationControllerGetParentsByIds(requestParameters: OrganisationControllerGetParentsByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ParentOrganisationenResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationenApiInterface
     */
    organisationControllerGetRootChildrenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationRootChildrenResponse>>;

    /**
     */
    organisationControllerGetRootChildren(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationRootChildrenResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationenApiInterface
     */
    organisationControllerGetRootOrganisationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationResponse>>;

    /**
     */
    organisationControllerGetRootOrganisation(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationResponse>;

    /**
     * 
     * @param {string} organisationId The id of an organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationenApiInterface
     */
    organisationControllerGetZugehoerigeOrganisationenRaw(requestParameters: OrganisationControllerGetZugehoerigeOrganisationenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationResponse>>>;

    /**
     */
    organisationControllerGetZugehoerigeOrganisationen(requestParameters: OrganisationControllerGetZugehoerigeOrganisationenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationResponse>>;

    /**
     * 
     * @param {string} organisationId The id of an organization
     * @param {UpdateOrganisationBodyParams} updateOrganisationBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationenApiInterface
     */
    organisationControllerUpdateOrganisationRaw(requestParameters: OrganisationControllerUpdateOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationResponse>>;

    /**
     */
    organisationControllerUpdateOrganisation(requestParameters: OrganisationControllerUpdateOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationResponse>;

    /**
     * 
     * @param {string} organisationId The id of an organization
     * @param {OrganisationByNameBodyParams} organisationByNameBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganisationenApiInterface
     */
    organisationControllerUpdateOrganisationNameRaw(requestParameters: OrganisationControllerUpdateOrganisationNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationResponseLegacy>>;

    /**
     */
    organisationControllerUpdateOrganisationName(requestParameters: OrganisationControllerUpdateOrganisationNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationResponseLegacy>;

}

/**
 * 
 */
export class OrganisationenApi extends runtime.BaseAPI implements OrganisationenApiInterface {

    /**
     */
    async organisationControllerAddZugehoerigeOrganisationRaw(requestParameters: OrganisationControllerAddZugehoerigeOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organisationId === null || requestParameters.organisationId === undefined) {
            throw new runtime.RequiredError('organisationId','Required parameter requestParameters.organisationId was null or undefined when calling organisationControllerAddZugehoerigeOrganisation.');
        }

        if (requestParameters.organisationByIdBodyParams === null || requestParameters.organisationByIdBodyParams === undefined) {
            throw new runtime.RequiredError('organisationByIdBodyParams','Required parameter requestParameters.organisationByIdBodyParams was null or undefined when calling organisationControllerAddZugehoerigeOrganisation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/organisationen/{organisationId}/zugehoerig`.replace(`{${"organisationId"}}`, encodeURIComponent(String(requestParameters.organisationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationByIdBodyParamsToJSON(requestParameters.organisationByIdBodyParams),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async organisationControllerAddZugehoerigeOrganisation(requestParameters: OrganisationControllerAddZugehoerigeOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organisationControllerAddZugehoerigeOrganisationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async organisationControllerCreateOrganisationRaw(requestParameters: OrganisationControllerCreateOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationResponse>> {
        if (requestParameters.createOrganisationBodyParams === null || requestParameters.createOrganisationBodyParams === undefined) {
            throw new runtime.RequiredError('createOrganisationBodyParams','Required parameter requestParameters.createOrganisationBodyParams was null or undefined when calling organisationControllerCreateOrganisation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/organisationen`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrganisationBodyParamsToJSON(requestParameters.createOrganisationBodyParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationResponseFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerCreateOrganisation(requestParameters: OrganisationControllerCreateOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationResponse> {
        const response = await this.organisationControllerCreateOrganisationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an organisation of type Klasse by id.
     * 
     */
    async organisationControllerDeleteKlasseRaw(requestParameters: OrganisationControllerDeleteKlasseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organisationId === null || requestParameters.organisationId === undefined) {
            throw new runtime.RequiredError('organisationId','Required parameter requestParameters.organisationId was null or undefined when calling organisationControllerDeleteKlasse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/organisationen/{organisationId}/klasse`.replace(`{${"organisationId"}}`, encodeURIComponent(String(requestParameters.organisationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an organisation of type Klasse by id.
     * 
     */
    async organisationControllerDeleteKlasse(requestParameters: OrganisationControllerDeleteKlasseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.organisationControllerDeleteKlasseRaw(requestParameters, initOverrides);
    }

    /**
     */
    async organisationControllerEnableForitslearningRaw(requestParameters: OrganisationControllerEnableForitslearningRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationResponseLegacy>> {
        if (requestParameters.organisationId === null || requestParameters.organisationId === undefined) {
            throw new runtime.RequiredError('organisationId','Required parameter requestParameters.organisationId was null or undefined when calling organisationControllerEnableForitslearning.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/organisationen/{organisationId}/enable-for-its-learning`.replace(`{${"organisationId"}}`, encodeURIComponent(String(requestParameters.organisationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationResponseLegacyFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerEnableForitslearning(requestParameters: OrganisationControllerEnableForitslearningRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationResponseLegacy> {
        const response = await this.organisationControllerEnableForitslearningRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async organisationControllerFindOrganisationByIdRaw(requestParameters: OrganisationControllerFindOrganisationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationResponse>> {
        if (requestParameters.organisationId === null || requestParameters.organisationId === undefined) {
            throw new runtime.RequiredError('organisationId','Required parameter requestParameters.organisationId was null or undefined when calling organisationControllerFindOrganisationById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/organisationen/{organisationId}`.replace(`{${"organisationId"}}`, encodeURIComponent(String(requestParameters.organisationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationResponseFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerFindOrganisationById(requestParameters: OrganisationControllerFindOrganisationByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationResponse> {
        const response = await this.organisationControllerFindOrganisationByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async organisationControllerFindOrganizationsRaw(requestParameters: OrganisationControllerFindOrganizationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationResponse>>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.kennung !== undefined) {
            queryParameters['kennung'] = requestParameters.kennung;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.searchString !== undefined) {
            queryParameters['searchString'] = requestParameters.searchString;
        }

        if (requestParameters.typ !== undefined) {
            queryParameters['typ'] = requestParameters.typ;
        }

        if (requestParameters.systemrechte) {
            queryParameters['systemrechte'] = requestParameters.systemrechte;
        }

        if (requestParameters.excludeTyp) {
            queryParameters['excludeTyp'] = requestParameters.excludeTyp;
        }

        if (requestParameters.administriertVon) {
            queryParameters['administriertVon'] = requestParameters.administriertVon;
        }

        if (requestParameters.zugehoerigZu) {
            queryParameters['zugehoerigZu'] = requestParameters.zugehoerigZu;
        }

        if (requestParameters.organisationIds) {
            queryParameters['organisationIds'] = requestParameters.organisationIds;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.sortField !== undefined) {
            queryParameters['sortField'] = requestParameters.sortField;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/organisationen`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationResponseFromJSON));
    }

    /**
     */
    async organisationControllerFindOrganizations(requestParameters: OrganisationControllerFindOrganizationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationResponse>> {
        const response = await this.organisationControllerFindOrganizationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async organisationControllerGetAdministrierteOrganisationenRaw(requestParameters: OrganisationControllerGetAdministrierteOrganisationenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationResponse>>> {
        if (requestParameters.organisationId === null || requestParameters.organisationId === undefined) {
            throw new runtime.RequiredError('organisationId','Required parameter requestParameters.organisationId was null or undefined when calling organisationControllerGetAdministrierteOrganisationen.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.searchFilter !== undefined) {
            queryParameters['searchFilter'] = requestParameters.searchFilter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/organisationen/{organisationId}/administriert`.replace(`{${"organisationId"}}`, encodeURIComponent(String(requestParameters.organisationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationResponseFromJSON));
    }

    /**
     */
    async organisationControllerGetAdministrierteOrganisationen(requestParameters: OrganisationControllerGetAdministrierteOrganisationenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationResponse>> {
        const response = await this.organisationControllerGetAdministrierteOrganisationenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async organisationControllerGetParentsByIdsRaw(requestParameters: OrganisationControllerGetParentsByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ParentOrganisationenResponse>> {
        if (requestParameters.parentOrganisationsByIdsBodyParams === null || requestParameters.parentOrganisationsByIdsBodyParams === undefined) {
            throw new runtime.RequiredError('parentOrganisationsByIdsBodyParams','Required parameter requestParameters.parentOrganisationsByIdsBodyParams was null or undefined when calling organisationControllerGetParentsByIds.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/organisationen/parents-by-ids`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ParentOrganisationsByIdsBodyParamsToJSON(requestParameters.parentOrganisationsByIdsBodyParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ParentOrganisationenResponseFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerGetParentsByIds(requestParameters: OrganisationControllerGetParentsByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ParentOrganisationenResponse> {
        const response = await this.organisationControllerGetParentsByIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async organisationControllerGetRootChildrenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationRootChildrenResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/organisationen/root/children`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationRootChildrenResponseFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerGetRootChildren(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationRootChildrenResponse> {
        const response = await this.organisationControllerGetRootChildrenRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async organisationControllerGetRootOrganisationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/organisationen/root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationResponseFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerGetRootOrganisation(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationResponse> {
        const response = await this.organisationControllerGetRootOrganisationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async organisationControllerGetZugehoerigeOrganisationenRaw(requestParameters: OrganisationControllerGetZugehoerigeOrganisationenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganisationResponse>>> {
        if (requestParameters.organisationId === null || requestParameters.organisationId === undefined) {
            throw new runtime.RequiredError('organisationId','Required parameter requestParameters.organisationId was null or undefined when calling organisationControllerGetZugehoerigeOrganisationen.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/organisationen/{organisationId}/zugehoerig`.replace(`{${"organisationId"}}`, encodeURIComponent(String(requestParameters.organisationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationResponseFromJSON));
    }

    /**
     */
    async organisationControllerGetZugehoerigeOrganisationen(requestParameters: OrganisationControllerGetZugehoerigeOrganisationenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganisationResponse>> {
        const response = await this.organisationControllerGetZugehoerigeOrganisationenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async organisationControllerUpdateOrganisationRaw(requestParameters: OrganisationControllerUpdateOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationResponse>> {
        if (requestParameters.organisationId === null || requestParameters.organisationId === undefined) {
            throw new runtime.RequiredError('organisationId','Required parameter requestParameters.organisationId was null or undefined when calling organisationControllerUpdateOrganisation.');
        }

        if (requestParameters.updateOrganisationBodyParams === null || requestParameters.updateOrganisationBodyParams === undefined) {
            throw new runtime.RequiredError('updateOrganisationBodyParams','Required parameter requestParameters.updateOrganisationBodyParams was null or undefined when calling organisationControllerUpdateOrganisation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/organisationen/{organisationId}`.replace(`{${"organisationId"}}`, encodeURIComponent(String(requestParameters.organisationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganisationBodyParamsToJSON(requestParameters.updateOrganisationBodyParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationResponseFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerUpdateOrganisation(requestParameters: OrganisationControllerUpdateOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationResponse> {
        const response = await this.organisationControllerUpdateOrganisationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async organisationControllerUpdateOrganisationNameRaw(requestParameters: OrganisationControllerUpdateOrganisationNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrganisationResponseLegacy>> {
        if (requestParameters.organisationId === null || requestParameters.organisationId === undefined) {
            throw new runtime.RequiredError('organisationId','Required parameter requestParameters.organisationId was null or undefined when calling organisationControllerUpdateOrganisationName.');
        }

        if (requestParameters.organisationByNameBodyParams === null || requestParameters.organisationByNameBodyParams === undefined) {
            throw new runtime.RequiredError('organisationByNameBodyParams','Required parameter requestParameters.organisationByNameBodyParams was null or undefined when calling organisationControllerUpdateOrganisationName.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/organisationen/{organisationId}/name`.replace(`{${"organisationId"}}`, encodeURIComponent(String(requestParameters.organisationId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: OrganisationByNameBodyParamsToJSON(requestParameters.organisationByNameBodyParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationResponseLegacyFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerUpdateOrganisationName(requestParameters: OrganisationControllerUpdateOrganisationNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrganisationResponseLegacy> {
        const response = await this.organisationControllerUpdateOrganisationNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const OrganisationControllerFindOrganizationsSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type OrganisationControllerFindOrganizationsSortOrderEnum = typeof OrganisationControllerFindOrganizationsSortOrderEnum[keyof typeof OrganisationControllerFindOrganizationsSortOrderEnum];
/**
 * @export
 */
export const OrganisationControllerFindOrganizationsSortFieldEnum = {
    Name: 'name',
    Kennung: 'kennung'
} as const;
export type OrganisationControllerFindOrganizationsSortFieldEnum = typeof OrganisationControllerFindOrganizationsSortFieldEnum[keyof typeof OrganisationControllerFindOrganizationsSortFieldEnum];
