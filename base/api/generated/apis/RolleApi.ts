/* tslint:disable */
/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddSystemrechtBodyParams,
  CreateRolleBodyParams,
  CreateRollenerweiterungBodyParams,
  DbiamRolleError,
  RolleResponse,
  RolleServiceProviderBodyParams,
  RolleServiceProviderResponse,
  RolleWithServiceProvidersResponse,
  RollenerweiterungResponse,
  ServiceProviderResponse,
  SystemRechtResponse,
  UpdateRolleBodyParams,
} from '../models';
import {
    AddSystemrechtBodyParamsFromJSON,
    AddSystemrechtBodyParamsToJSON,
    CreateRolleBodyParamsFromJSON,
    CreateRolleBodyParamsToJSON,
    CreateRollenerweiterungBodyParamsFromJSON,
    CreateRollenerweiterungBodyParamsToJSON,
    DbiamRolleErrorFromJSON,
    DbiamRolleErrorToJSON,
    RolleResponseFromJSON,
    RolleResponseToJSON,
    RolleServiceProviderBodyParamsFromJSON,
    RolleServiceProviderBodyParamsToJSON,
    RolleServiceProviderResponseFromJSON,
    RolleServiceProviderResponseToJSON,
    RolleWithServiceProvidersResponseFromJSON,
    RolleWithServiceProvidersResponseToJSON,
    RollenerweiterungResponseFromJSON,
    RollenerweiterungResponseToJSON,
    ServiceProviderResponseFromJSON,
    ServiceProviderResponseToJSON,
    SystemRechtResponseFromJSON,
    SystemRechtResponseToJSON,
    UpdateRolleBodyParamsFromJSON,
    UpdateRolleBodyParamsToJSON,
} from '../models';

export interface RolleControllerAddSystemRechtRequest {
    rolleId: string;
    addSystemrechtBodyParams: AddSystemrechtBodyParams;
}

export interface RolleControllerCreateRolleRequest {
    createRolleBodyParams: CreateRolleBodyParams;
}

export interface RolleControllerCreateRollenerweiterungRequest {
    createRollenerweiterungBodyParams: CreateRollenerweiterungBodyParams;
}

export interface RolleControllerDeleteRolleRequest {
    rolleId: string;
}

export interface RolleControllerFindRolleByIdWithServiceProvidersRequest {
    rolleId: string;
}

export interface RolleControllerFindRollenRequest {
    offset?: number;
    limit?: number;
    searchStr?: string;
}

export interface RolleControllerGetRolleServiceProviderIdsRequest {
    rolleId: string;
}

export interface RolleControllerRemoveServiceProviderByIdRequest {
    rolleId: string;
    rolleServiceProviderBodyParams: RolleServiceProviderBodyParams;
}

export interface RolleControllerUpdateRolleRequest {
    rolleId: string;
    updateRolleBodyParams: UpdateRolleBodyParams;
}

export interface RolleControllerUpdateServiceProvidersByIdRequest {
    rolleId: string;
    rolleServiceProviderBodyParams: RolleServiceProviderBodyParams;
}

/**
 * RolleApi - interface
 * 
 * @export
 * @interface RolleApiInterface
 */
export interface RolleApiInterface {
    /**
     * Add systemrecht to a rolle.
     * @summary 
     * @param {string} rolleId The id for the rolle.
     * @param {AddSystemrechtBodyParams} addSystemrechtBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolleApiInterface
     */
    rolleControllerAddSystemRechtRaw(requestParameters: RolleControllerAddSystemRechtRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Add systemrecht to a rolle.
     * 
     */
    rolleControllerAddSystemRecht(requestParameters: RolleControllerAddSystemRechtRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Create a new rolle.
     * @summary 
     * @param {CreateRolleBodyParams} createRolleBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolleApiInterface
     */
    rolleControllerCreateRolleRaw(requestParameters: RolleControllerCreateRolleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolleResponse>>;

    /**
     * Create a new rolle.
     * 
     */
    rolleControllerCreateRolle(requestParameters: RolleControllerCreateRolleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolleResponse>;

    /**
     * Create a new rollenerweiterung.
     * @summary 
     * @param {CreateRollenerweiterungBodyParams} createRollenerweiterungBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolleApiInterface
     */
    rolleControllerCreateRollenerweiterungRaw(requestParameters: RolleControllerCreateRollenerweiterungRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RollenerweiterungResponse>>;

    /**
     * Create a new rollenerweiterung.
     * 
     */
    rolleControllerCreateRollenerweiterung(requestParameters: RolleControllerCreateRollenerweiterungRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RollenerweiterungResponse>;

    /**
     * Delete a role by id.
     * @summary 
     * @param {string} rolleId The id for the rolle.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolleApiInterface
     */
    rolleControllerDeleteRolleRaw(requestParameters: RolleControllerDeleteRolleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a role by id.
     * 
     */
    rolleControllerDeleteRolle(requestParameters: RolleControllerDeleteRolleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get rolle by id.
     * @summary 
     * @param {string} rolleId The id for the rolle.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolleApiInterface
     */
    rolleControllerFindRolleByIdWithServiceProvidersRaw(requestParameters: RolleControllerFindRolleByIdWithServiceProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolleWithServiceProvidersResponse>>;

    /**
     * Get rolle by id.
     * 
     */
    rolleControllerFindRolleByIdWithServiceProviders(requestParameters: RolleControllerFindRolleByIdWithServiceProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolleWithServiceProvidersResponse>;

    /**
     * List all rollen.
     * @summary 
     * @param {number} [offset] The offset of the paginated list.
     * @param {number} [limit] The requested limit for the page size.
     * @param {string} [searchStr] The name for the role.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolleApiInterface
     */
    rolleControllerFindRollenRaw(requestParameters: RolleControllerFindRollenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RolleWithServiceProvidersResponse>>>;

    /**
     * List all rollen.
     * 
     */
    rolleControllerFindRollen(requestParameters: RolleControllerFindRollenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RolleWithServiceProvidersResponse>>;

    /**
     * Get all systemrechte for rollen.
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolleApiInterface
     */
    rolleControllerGetAllSystemrechteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SystemRechtResponse>>>;

    /**
     * Get all systemrechte for rollen.
     * 
     */
    rolleControllerGetAllSystemrechte(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SystemRechtResponse>>;

    /**
     * Get service-providers for a rolle by its id.
     * @summary 
     * @param {string} rolleId The id for the rolle.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolleApiInterface
     */
    rolleControllerGetRolleServiceProviderIdsRaw(requestParameters: RolleControllerGetRolleServiceProviderIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolleServiceProviderResponse>>;

    /**
     * Get service-providers for a rolle by its id.
     * 
     */
    rolleControllerGetRolleServiceProviderIds(requestParameters: RolleControllerGetRolleServiceProviderIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolleServiceProviderResponse>;

    /**
     * Remove a service-provider from a rolle by id.
     * @summary 
     * @param {string} rolleId The id for the rolle.
     * @param {RolleServiceProviderBodyParams} rolleServiceProviderBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolleApiInterface
     */
    rolleControllerRemoveServiceProviderByIdRaw(requestParameters: RolleControllerRemoveServiceProviderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove a service-provider from a rolle by id.
     * 
     */
    rolleControllerRemoveServiceProviderById(requestParameters: RolleControllerRemoveServiceProviderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Update rolle.
     * @summary 
     * @param {string} rolleId The id for the rolle.
     * @param {UpdateRolleBodyParams} updateRolleBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolleApiInterface
     */
    rolleControllerUpdateRolleRaw(requestParameters: RolleControllerUpdateRolleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolleWithServiceProvidersResponse>>;

    /**
     * Update rolle.
     * 
     */
    rolleControllerUpdateRolle(requestParameters: RolleControllerUpdateRolleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolleWithServiceProvidersResponse>;

    /**
     * Add a service-provider to a rolle by id.
     * @summary 
     * @param {string} rolleId The id for the rolle.
     * @param {RolleServiceProviderBodyParams} rolleServiceProviderBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolleApiInterface
     */
    rolleControllerUpdateServiceProvidersByIdRaw(requestParameters: RolleControllerUpdateServiceProvidersByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceProviderResponse>>>;

    /**
     * Add a service-provider to a rolle by id.
     * 
     */
    rolleControllerUpdateServiceProvidersById(requestParameters: RolleControllerUpdateServiceProvidersByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceProviderResponse>>;

}

/**
 * 
 */
export class RolleApi extends runtime.BaseAPI implements RolleApiInterface {

    /**
     * Add systemrecht to a rolle.
     * 
     */
    async rolleControllerAddSystemRechtRaw(requestParameters: RolleControllerAddSystemRechtRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.rolleId === null || requestParameters.rolleId === undefined) {
            throw new runtime.RequiredError('rolleId','Required parameter requestParameters.rolleId was null or undefined when calling rolleControllerAddSystemRecht.');
        }

        if (requestParameters.addSystemrechtBodyParams === null || requestParameters.addSystemrechtBodyParams === undefined) {
            throw new runtime.RequiredError('addSystemrechtBodyParams','Required parameter requestParameters.addSystemrechtBodyParams was null or undefined when calling rolleControllerAddSystemRecht.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/rolle/{rolleId}`.replace(`{${"rolleId"}}`, encodeURIComponent(String(requestParameters.rolleId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AddSystemrechtBodyParamsToJSON(requestParameters.addSystemrechtBodyParams),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add systemrecht to a rolle.
     * 
     */
    async rolleControllerAddSystemRecht(requestParameters: RolleControllerAddSystemRechtRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rolleControllerAddSystemRechtRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new rolle.
     * 
     */
    async rolleControllerCreateRolleRaw(requestParameters: RolleControllerCreateRolleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolleResponse>> {
        if (requestParameters.createRolleBodyParams === null || requestParameters.createRolleBodyParams === undefined) {
            throw new runtime.RequiredError('createRolleBodyParams','Required parameter requestParameters.createRolleBodyParams was null or undefined when calling rolleControllerCreateRolle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/rolle`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRolleBodyParamsToJSON(requestParameters.createRolleBodyParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolleResponseFromJSON(jsonValue));
    }

    /**
     * Create a new rolle.
     * 
     */
    async rolleControllerCreateRolle(requestParameters: RolleControllerCreateRolleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolleResponse> {
        const response = await this.rolleControllerCreateRolleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new rollenerweiterung.
     * 
     */
    async rolleControllerCreateRollenerweiterungRaw(requestParameters: RolleControllerCreateRollenerweiterungRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RollenerweiterungResponse>> {
        if (requestParameters.createRollenerweiterungBodyParams === null || requestParameters.createRollenerweiterungBodyParams === undefined) {
            throw new runtime.RequiredError('createRollenerweiterungBodyParams','Required parameter requestParameters.createRollenerweiterungBodyParams was null or undefined when calling rolleControllerCreateRollenerweiterung.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/rolle/erweiterung`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRollenerweiterungBodyParamsToJSON(requestParameters.createRollenerweiterungBodyParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RollenerweiterungResponseFromJSON(jsonValue));
    }

    /**
     * Create a new rollenerweiterung.
     * 
     */
    async rolleControllerCreateRollenerweiterung(requestParameters: RolleControllerCreateRollenerweiterungRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RollenerweiterungResponse> {
        const response = await this.rolleControllerCreateRollenerweiterungRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a role by id.
     * 
     */
    async rolleControllerDeleteRolleRaw(requestParameters: RolleControllerDeleteRolleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.rolleId === null || requestParameters.rolleId === undefined) {
            throw new runtime.RequiredError('rolleId','Required parameter requestParameters.rolleId was null or undefined when calling rolleControllerDeleteRolle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/rolle/{rolleId}`.replace(`{${"rolleId"}}`, encodeURIComponent(String(requestParameters.rolleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a role by id.
     * 
     */
    async rolleControllerDeleteRolle(requestParameters: RolleControllerDeleteRolleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rolleControllerDeleteRolleRaw(requestParameters, initOverrides);
    }

    /**
     * Get rolle by id.
     * 
     */
    async rolleControllerFindRolleByIdWithServiceProvidersRaw(requestParameters: RolleControllerFindRolleByIdWithServiceProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolleWithServiceProvidersResponse>> {
        if (requestParameters.rolleId === null || requestParameters.rolleId === undefined) {
            throw new runtime.RequiredError('rolleId','Required parameter requestParameters.rolleId was null or undefined when calling rolleControllerFindRolleByIdWithServiceProviders.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/rolle/{rolleId}`.replace(`{${"rolleId"}}`, encodeURIComponent(String(requestParameters.rolleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolleWithServiceProvidersResponseFromJSON(jsonValue));
    }

    /**
     * Get rolle by id.
     * 
     */
    async rolleControllerFindRolleByIdWithServiceProviders(requestParameters: RolleControllerFindRolleByIdWithServiceProvidersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolleWithServiceProvidersResponse> {
        const response = await this.rolleControllerFindRolleByIdWithServiceProvidersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all rollen.
     * 
     */
    async rolleControllerFindRollenRaw(requestParameters: RolleControllerFindRollenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RolleWithServiceProvidersResponse>>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.searchStr !== undefined) {
            queryParameters['searchStr'] = requestParameters.searchStr;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/rolle`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RolleWithServiceProvidersResponseFromJSON));
    }

    /**
     * List all rollen.
     * 
     */
    async rolleControllerFindRollen(requestParameters: RolleControllerFindRollenRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RolleWithServiceProvidersResponse>> {
        const response = await this.rolleControllerFindRollenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all systemrechte for rollen.
     * 
     */
    async rolleControllerGetAllSystemrechteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SystemRechtResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/rolle/systemrechte`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SystemRechtResponseFromJSON));
    }

    /**
     * Get all systemrechte for rollen.
     * 
     */
    async rolleControllerGetAllSystemrechte(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SystemRechtResponse>> {
        const response = await this.rolleControllerGetAllSystemrechteRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get service-providers for a rolle by its id.
     * 
     */
    async rolleControllerGetRolleServiceProviderIdsRaw(requestParameters: RolleControllerGetRolleServiceProviderIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolleServiceProviderResponse>> {
        if (requestParameters.rolleId === null || requestParameters.rolleId === undefined) {
            throw new runtime.RequiredError('rolleId','Required parameter requestParameters.rolleId was null or undefined when calling rolleControllerGetRolleServiceProviderIds.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/rolle/{rolleId}/serviceProviders`.replace(`{${"rolleId"}}`, encodeURIComponent(String(requestParameters.rolleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolleServiceProviderResponseFromJSON(jsonValue));
    }

    /**
     * Get service-providers for a rolle by its id.
     * 
     */
    async rolleControllerGetRolleServiceProviderIds(requestParameters: RolleControllerGetRolleServiceProviderIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolleServiceProviderResponse> {
        const response = await this.rolleControllerGetRolleServiceProviderIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a service-provider from a rolle by id.
     * 
     */
    async rolleControllerRemoveServiceProviderByIdRaw(requestParameters: RolleControllerRemoveServiceProviderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.rolleId === null || requestParameters.rolleId === undefined) {
            throw new runtime.RequiredError('rolleId','Required parameter requestParameters.rolleId was null or undefined when calling rolleControllerRemoveServiceProviderById.');
        }

        if (requestParameters.rolleServiceProviderBodyParams === null || requestParameters.rolleServiceProviderBodyParams === undefined) {
            throw new runtime.RequiredError('rolleServiceProviderBodyParams','Required parameter requestParameters.rolleServiceProviderBodyParams was null or undefined when calling rolleControllerRemoveServiceProviderById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/rolle/{rolleId}/serviceProviders`.replace(`{${"rolleId"}}`, encodeURIComponent(String(requestParameters.rolleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: RolleServiceProviderBodyParamsToJSON(requestParameters.rolleServiceProviderBodyParams),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a service-provider from a rolle by id.
     * 
     */
    async rolleControllerRemoveServiceProviderById(requestParameters: RolleControllerRemoveServiceProviderByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rolleControllerRemoveServiceProviderByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Update rolle.
     * 
     */
    async rolleControllerUpdateRolleRaw(requestParameters: RolleControllerUpdateRolleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolleWithServiceProvidersResponse>> {
        if (requestParameters.rolleId === null || requestParameters.rolleId === undefined) {
            throw new runtime.RequiredError('rolleId','Required parameter requestParameters.rolleId was null or undefined when calling rolleControllerUpdateRolle.');
        }

        if (requestParameters.updateRolleBodyParams === null || requestParameters.updateRolleBodyParams === undefined) {
            throw new runtime.RequiredError('updateRolleBodyParams','Required parameter requestParameters.updateRolleBodyParams was null or undefined when calling rolleControllerUpdateRolle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/rolle/{rolleId}`.replace(`{${"rolleId"}}`, encodeURIComponent(String(requestParameters.rolleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRolleBodyParamsToJSON(requestParameters.updateRolleBodyParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolleWithServiceProvidersResponseFromJSON(jsonValue));
    }

    /**
     * Update rolle.
     * 
     */
    async rolleControllerUpdateRolle(requestParameters: RolleControllerUpdateRolleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolleWithServiceProvidersResponse> {
        const response = await this.rolleControllerUpdateRolleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a service-provider to a rolle by id.
     * 
     */
    async rolleControllerUpdateServiceProvidersByIdRaw(requestParameters: RolleControllerUpdateServiceProvidersByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceProviderResponse>>> {
        if (requestParameters.rolleId === null || requestParameters.rolleId === undefined) {
            throw new runtime.RequiredError('rolleId','Required parameter requestParameters.rolleId was null or undefined when calling rolleControllerUpdateServiceProvidersById.');
        }

        if (requestParameters.rolleServiceProviderBodyParams === null || requestParameters.rolleServiceProviderBodyParams === undefined) {
            throw new runtime.RequiredError('rolleServiceProviderBodyParams','Required parameter requestParameters.rolleServiceProviderBodyParams was null or undefined when calling rolleControllerUpdateServiceProvidersById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/rolle/{rolleId}/serviceProviders`.replace(`{${"rolleId"}}`, encodeURIComponent(String(requestParameters.rolleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RolleServiceProviderBodyParamsToJSON(requestParameters.rolleServiceProviderBodyParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceProviderResponseFromJSON));
    }

    /**
     * Add a service-provider to a rolle by id.
     * 
     */
    async rolleControllerUpdateServiceProvidersById(requestParameters: RolleControllerUpdateServiceProvidersByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceProviderResponse>> {
        const response = await this.rolleControllerUpdateServiceProvidersByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
