/* eslint-disable */
/**
 * dBildungs IAM
 * The dBildungs IAM server API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DBiamPersonResponse,
  DbiamCreatePersonWithPersonenkontexteBodyParams,
  DbiamPersonenkontextError,
  DbiamPersonenkontexteUpdateError,
  DbiamUpdatePersonenkontexteBodyParams,
  OperationContext,
  PersonenkontextWorkflowResponse,
  PersonenkontexteUpdateResponse,
  RollenSystemRecht,
} from '../models';
import {
    DBiamPersonResponseFromJSON,
    DBiamPersonResponseToJSON,
    DbiamCreatePersonWithPersonenkontexteBodyParamsFromJSON,
    DbiamCreatePersonWithPersonenkontexteBodyParamsToJSON,
    DbiamPersonenkontextErrorFromJSON,
    DbiamPersonenkontextErrorToJSON,
    DbiamPersonenkontexteUpdateErrorFromJSON,
    DbiamPersonenkontexteUpdateErrorToJSON,
    DbiamUpdatePersonenkontexteBodyParamsFromJSON,
    DbiamUpdatePersonenkontexteBodyParamsToJSON,
    OperationContextFromJSON,
    OperationContextToJSON,
    PersonenkontextWorkflowResponseFromJSON,
    PersonenkontextWorkflowResponseToJSON,
    PersonenkontexteUpdateResponseFromJSON,
    PersonenkontexteUpdateResponseToJSON,
    RollenSystemRechtFromJSON,
    RollenSystemRechtToJSON,
} from '../models';

export interface DbiamPersonenkontextWorkflowControllerCommitRequest {
    personId: string;
    dbiamUpdatePersonenkontexteBodyParams: DbiamUpdatePersonenkontexteBodyParams;
    personalnummer?: string;
}

export interface DbiamPersonenkontextWorkflowControllerCreatePersonWithPersonenkontexteRequest {
    dbiamCreatePersonWithPersonenkontexteBodyParams: DbiamCreatePersonWithPersonenkontexteBodyParams;
}

export interface DbiamPersonenkontextWorkflowControllerProcessStepRequest {
    operationContext: OperationContext;
    personId?: string | null;
    organisationId?: string | null;
    rollenIds?: Array<string>;
    rolleName?: string | null;
    organisationName?: string | null;
    limit?: number;
    requestedWithSystemrecht?: RollenSystemRecht;
}

/**
 * PersonenkontextApi - interface
 * 
 * @export
 * @interface PersonenkontextApiInterface
 */
export interface PersonenkontextApiInterface {
    /**
     * 
     * @param {string} personId The ID for the person.
     * @param {DbiamUpdatePersonenkontexteBodyParams} dbiamUpdatePersonenkontexteBodyParams 
     * @param {string} [personalnummer] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonenkontextApiInterface
     */
    dbiamPersonenkontextWorkflowControllerCommitRaw(requestParameters: DbiamPersonenkontextWorkflowControllerCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonenkontexteUpdateResponse>>;

    /**
     */
    dbiamPersonenkontextWorkflowControllerCommit(requestParameters: DbiamPersonenkontextWorkflowControllerCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonenkontexteUpdateResponse>;

    /**
     * 
     * @param {DbiamCreatePersonWithPersonenkontexteBodyParams} dbiamCreatePersonWithPersonenkontexteBodyParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonenkontextApiInterface
     */
    dbiamPersonenkontextWorkflowControllerCreatePersonWithPersonenkontexteRaw(requestParameters: DbiamPersonenkontextWorkflowControllerCreatePersonWithPersonenkontexteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DBiamPersonResponse>>;

    /**
     */
    dbiamPersonenkontextWorkflowControllerCreatePersonWithPersonenkontexte(requestParameters: DbiamPersonenkontextWorkflowControllerCreatePersonWithPersonenkontexteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DBiamPersonResponse>;

    /**
     * 
     * @param {OperationContext} operationContext The context in which this request happens. Affects permission checks.
     * @param {string} [personId] ID of the person to be modified, will restrict the returned roles
     * @param {string} [organisationId] ID of the organisation to filter the rollen later
     * @param {Array<string>} [rollenIds] IDs of the rollen.
     * @param {string} [rolleName] Rolle name used to filter for rollen in personenkontext.
     * @param {string} [organisationName] Organisation/SSK name used to filter for schulstrukturknoten in personenkontext.
     * @param {number} [limit] The limit of items for the request.
     * @param {RollenSystemRecht} [requestedWithSystemrecht] The systemrecht used to filter for rollen in personenkontext.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonenkontextApiInterface
     */
    dbiamPersonenkontextWorkflowControllerProcessStepRaw(requestParameters: DbiamPersonenkontextWorkflowControllerProcessStepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonenkontextWorkflowResponse>>;

    /**
     */
    dbiamPersonenkontextWorkflowControllerProcessStep(requestParameters: DbiamPersonenkontextWorkflowControllerProcessStepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonenkontextWorkflowResponse>;

}

/**
 * 
 */
export class PersonenkontextApi extends runtime.BaseAPI implements PersonenkontextApiInterface {

    /**
     */
    async dbiamPersonenkontextWorkflowControllerCommitRaw(requestParameters: DbiamPersonenkontextWorkflowControllerCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonenkontexteUpdateResponse>> {
        if (requestParameters.personId === null || requestParameters.personId === undefined) {
            throw new runtime.RequiredError('personId','Required parameter requestParameters.personId was null or undefined when calling dbiamPersonenkontextWorkflowControllerCommit.');
        }

        if (requestParameters.dbiamUpdatePersonenkontexteBodyParams === null || requestParameters.dbiamUpdatePersonenkontexteBodyParams === undefined) {
            throw new runtime.RequiredError('dbiamUpdatePersonenkontexteBodyParams','Required parameter requestParameters.dbiamUpdatePersonenkontexteBodyParams was null or undefined when calling dbiamPersonenkontextWorkflowControllerCommit.');
        }

        const queryParameters: any = {};

        if (requestParameters.personalnummer !== undefined) {
            queryParameters['personalnummer'] = requestParameters.personalnummer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personenkontext-workflow/{personId}`.replace(`{${"personId"}}`, encodeURIComponent(String(requestParameters.personId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DbiamUpdatePersonenkontexteBodyParamsToJSON(requestParameters.dbiamUpdatePersonenkontexteBodyParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonenkontexteUpdateResponseFromJSON(jsonValue));
    }

    /**
     */
    async dbiamPersonenkontextWorkflowControllerCommit(requestParameters: DbiamPersonenkontextWorkflowControllerCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonenkontexteUpdateResponse> {
        const response = await this.dbiamPersonenkontextWorkflowControllerCommitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async dbiamPersonenkontextWorkflowControllerCreatePersonWithPersonenkontexteRaw(requestParameters: DbiamPersonenkontextWorkflowControllerCreatePersonWithPersonenkontexteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DBiamPersonResponse>> {
        if (requestParameters.dbiamCreatePersonWithPersonenkontexteBodyParams === null || requestParameters.dbiamCreatePersonWithPersonenkontexteBodyParams === undefined) {
            throw new runtime.RequiredError('dbiamCreatePersonWithPersonenkontexteBodyParams','Required parameter requestParameters.dbiamCreatePersonWithPersonenkontexteBodyParams was null or undefined when calling dbiamPersonenkontextWorkflowControllerCreatePersonWithPersonenkontexte.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personenkontext-workflow`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DbiamCreatePersonWithPersonenkontexteBodyParamsToJSON(requestParameters.dbiamCreatePersonWithPersonenkontexteBodyParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DBiamPersonResponseFromJSON(jsonValue));
    }

    /**
     */
    async dbiamPersonenkontextWorkflowControllerCreatePersonWithPersonenkontexte(requestParameters: DbiamPersonenkontextWorkflowControllerCreatePersonWithPersonenkontexteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DBiamPersonResponse> {
        const response = await this.dbiamPersonenkontextWorkflowControllerCreatePersonWithPersonenkontexteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async dbiamPersonenkontextWorkflowControllerProcessStepRaw(requestParameters: DbiamPersonenkontextWorkflowControllerProcessStepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PersonenkontextWorkflowResponse>> {
        if (requestParameters.operationContext === null || requestParameters.operationContext === undefined) {
            throw new runtime.RequiredError('operationContext','Required parameter requestParameters.operationContext was null or undefined when calling dbiamPersonenkontextWorkflowControllerProcessStep.');
        }

        const queryParameters: any = {};

        if (requestParameters.operationContext !== undefined) {
            queryParameters['operationContext'] = requestParameters.operationContext;
        }

        if (requestParameters.personId !== undefined) {
            queryParameters['personId'] = requestParameters.personId;
        }

        if (requestParameters.organisationId !== undefined) {
            queryParameters['organisationId'] = requestParameters.organisationId;
        }

        if (requestParameters.rollenIds) {
            queryParameters['rollenIds'] = requestParameters.rollenIds;
        }

        if (requestParameters.rolleName !== undefined) {
            queryParameters['rolleName'] = requestParameters.rolleName;
        }

        if (requestParameters.organisationName !== undefined) {
            queryParameters['organisationName'] = requestParameters.organisationName;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.requestedWithSystemrecht !== undefined) {
            queryParameters['requestedWithSystemrecht'] = requestParameters.requestedWithSystemrecht;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }

        const response = await this.request({
            path: `/api/personenkontext-workflow/step`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonenkontextWorkflowResponseFromJSON(jsonValue));
    }

    /**
     */
    async dbiamPersonenkontextWorkflowControllerProcessStep(requestParameters: DbiamPersonenkontextWorkflowControllerProcessStepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PersonenkontextWorkflowResponse> {
        const response = await this.dbiamPersonenkontextWorkflowControllerProcessStepRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
